# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Ability {
  _count: AbilityCount
  ability: String!
  createdAt: DateTime!
  expiresAt: DateTime
  id: Int!
  pokemonAbilities(cursor: PokemonAbilitiesWhereUniqueInput, distinct: [PokemonAbilitiesScalarFieldEnum!], orderBy: [PokemonAbilitiesOrderByWithRelationInput!], skip: Int, take: Int, where: PokemonAbilitiesWhereInput): [PokemonAbilities!]!
  updatedAt: DateTime!
}

type AbilityAvgAggregate {
  id: Float
}

input AbilityAvgOrderByAggregateInput {
  id: SortOrder
}

type AbilityCount {
  pokemonAbilities: Int!
}

type AbilityCountAggregate {
  _all: Int!
  ability: Int!
  createdAt: Int!
  expiresAt: Int!
  id: Int!
  updatedAt: Int!
}

input AbilityCountOrderByAggregateInput {
  ability: SortOrder
  createdAt: SortOrder
  expiresAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input AbilityCreateInput {
  ability: String!
  createdAt: DateTime
  expiresAt: DateTime
  pokemonAbilities: PokemonAbilitiesCreateNestedManyWithoutAbilityInput
  updatedAt: DateTime
}

input AbilityCreateManyInput {
  ability: String!
  createdAt: DateTime
  expiresAt: DateTime
  id: Int
  updatedAt: DateTime
}

input AbilityCreateNestedOneWithoutPokemonAbilitiesInput {
  connect: AbilityWhereUniqueInput
  connectOrCreate: AbilityCreateOrConnectWithoutPokemonAbilitiesInput
  create: AbilityCreateWithoutPokemonAbilitiesInput
}

input AbilityCreateOrConnectWithoutPokemonAbilitiesInput {
  create: AbilityCreateWithoutPokemonAbilitiesInput!
  where: AbilityWhereUniqueInput!
}

input AbilityCreateWithoutPokemonAbilitiesInput {
  ability: String!
  createdAt: DateTime
  expiresAt: DateTime
  updatedAt: DateTime
}

type AbilityGroupBy {
  _avg: AbilityAvgAggregate
  _count: AbilityCountAggregate
  _max: AbilityMaxAggregate
  _min: AbilityMinAggregate
  _sum: AbilitySumAggregate
  ability: String!
  createdAt: DateTime!
  expiresAt: DateTime
  id: Int!
  updatedAt: DateTime!
}

type AbilityMaxAggregate {
  ability: String
  createdAt: DateTime
  expiresAt: DateTime
  id: Int
  updatedAt: DateTime
}

input AbilityMaxOrderByAggregateInput {
  ability: SortOrder
  createdAt: SortOrder
  expiresAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

type AbilityMinAggregate {
  ability: String
  createdAt: DateTime
  expiresAt: DateTime
  id: Int
  updatedAt: DateTime
}

input AbilityMinOrderByAggregateInput {
  ability: SortOrder
  createdAt: SortOrder
  expiresAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input AbilityOrderByWithAggregationInput {
  _avg: AbilityAvgOrderByAggregateInput
  _count: AbilityCountOrderByAggregateInput
  _max: AbilityMaxOrderByAggregateInput
  _min: AbilityMinOrderByAggregateInput
  _sum: AbilitySumOrderByAggregateInput
  ability: SortOrder
  createdAt: SortOrder
  expiresAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input AbilityOrderByWithRelationInput {
  ability: SortOrder
  createdAt: SortOrder
  expiresAt: SortOrder
  id: SortOrder
  pokemonAbilities: PokemonAbilitiesOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input AbilityRelationFilter {
  is: AbilityWhereInput
  isNot: AbilityWhereInput
}

enum AbilityScalarFieldEnum {
  ability
  createdAt
  expiresAt
  id
  updatedAt
}

input AbilityScalarWhereWithAggregatesInput {
  AND: [AbilityScalarWhereWithAggregatesInput!]
  NOT: [AbilityScalarWhereWithAggregatesInput!]
  OR: [AbilityScalarWhereWithAggregatesInput!]
  ability: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  expiresAt: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type AbilitySumAggregate {
  id: Int
}

input AbilitySumOrderByAggregateInput {
  id: SortOrder
}

input AbilityUpdateInput {
  ability: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: NullableDateTimeFieldUpdateOperationsInput
  pokemonAbilities: PokemonAbilitiesUpdateManyWithoutAbilityInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AbilityUpdateManyMutationInput {
  ability: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AbilityUpdateOneRequiredWithoutPokemonAbilitiesInput {
  connect: AbilityWhereUniqueInput
  connectOrCreate: AbilityCreateOrConnectWithoutPokemonAbilitiesInput
  create: AbilityCreateWithoutPokemonAbilitiesInput
  update: AbilityUpdateWithoutPokemonAbilitiesInput
  upsert: AbilityUpsertWithoutPokemonAbilitiesInput
}

input AbilityUpdateWithoutPokemonAbilitiesInput {
  ability: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AbilityUpsertWithoutPokemonAbilitiesInput {
  create: AbilityCreateWithoutPokemonAbilitiesInput!
  update: AbilityUpdateWithoutPokemonAbilitiesInput!
}

input AbilityWhereInput {
  AND: [AbilityWhereInput!]
  NOT: [AbilityWhereInput!]
  OR: [AbilityWhereInput!]
  ability: StringFilter
  createdAt: DateTimeFilter
  expiresAt: DateTimeNullableFilter
  id: IntFilter
  pokemonAbilities: PokemonAbilitiesListRelationFilter
  updatedAt: DateTimeFilter
}

input AbilityWhereUniqueInput {
  ability: String
  id: Int
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAbility {
  _avg: AbilityAvgAggregate
  _count: AbilityCountAggregate
  _max: AbilityMaxAggregate
  _min: AbilityMinAggregate
  _sum: AbilitySumAggregate
}

type AggregateCaptured {
  _avg: CapturedAvgAggregate
  _count: CapturedCountAggregate
  _max: CapturedMaxAggregate
  _min: CapturedMinAggregate
  _sum: CapturedSumAggregate
}

type AggregateClassification {
  _avg: ClassificationAvgAggregate
  _count: ClassificationCountAggregate
  _max: ClassificationMaxAggregate
  _min: ClassificationMinAggregate
  _sum: ClassificationSumAggregate
}

type AggregateGeneration {
  _avg: GenerationAvgAggregate
  _count: GenerationCountAggregate
  _max: GenerationMaxAggregate
  _min: GenerationMinAggregate
  _sum: GenerationSumAggregate
}

type AggregatePokedex {
  _avg: PokedexAvgAggregate
  _count: PokedexCountAggregate
  _max: PokedexMaxAggregate
  _min: PokedexMinAggregate
  _sum: PokedexSumAggregate
}

type AggregatePokemon {
  _avg: PokemonAvgAggregate
  _count: PokemonCountAggregate
  _max: PokemonMaxAggregate
  _min: PokemonMinAggregate
  _sum: PokemonSumAggregate
}

type AggregatePokemonAbilities {
  _avg: PokemonAbilitiesAvgAggregate
  _count: PokemonAbilitiesCountAggregate
  _max: PokemonAbilitiesMaxAggregate
  _min: PokemonAbilitiesMinAggregate
  _sum: PokemonAbilitiesSumAggregate
}

type AggregatePokemonTypes {
  _avg: PokemonTypesAvgAggregate
  _count: PokemonTypesCountAggregate
  _max: PokemonTypesMaxAggregate
  _min: PokemonTypesMinAggregate
  _sum: PokemonTypesSumAggregate
}

type AggregateTrainer {
  _avg: TrainerAvgAggregate
  _count: TrainerCountAggregate
  _max: TrainerMaxAggregate
  _min: TrainerMinAggregate
  _sum: TrainerSumAggregate
}

type AggregateType {
  _avg: TypeAvgAggregate
  _count: TypeCountAggregate
  _max: TypeMaxAggregate
  _min: TypeMinAggregate
  _sum: TypeSumAggregate
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type Captured {
  gender: Gender
  id: Int!
  level: Int
  pokemon: Pokemon!
  pokemonId: Int!
  trainer: Trainer!
  trainerId: Int!
}

type CapturedAvgAggregate {
  id: Float
  level: Float
  pokemonId: Float
  trainerId: Float
}

input CapturedAvgOrderByAggregateInput {
  id: SortOrder
  level: SortOrder
  pokemonId: SortOrder
  trainerId: SortOrder
}

type CapturedCountAggregate {
  _all: Int!
  gender: Int!
  id: Int!
  level: Int!
  pokemonId: Int!
  trainerId: Int!
}

input CapturedCountOrderByAggregateInput {
  gender: SortOrder
  id: SortOrder
  level: SortOrder
  pokemonId: SortOrder
  trainerId: SortOrder
}

input CapturedCreateInput {
  gender: Gender
  level: Int
  pokemon: PokemonCreateNestedOneWithoutCapturedInput!
  trainer: TrainerCreateNestedOneWithoutCapturedInput!
}

input CapturedCreateManyInput {
  gender: Gender
  id: Int
  level: Int
  pokemonId: Int!
  trainerId: Int!
}

input CapturedCreateManyPokemonInput {
  gender: Gender
  id: Int
  level: Int
  trainerId: Int!
}

input CapturedCreateManyPokemonInputEnvelope {
  data: [CapturedCreateManyPokemonInput!]!
  skipDuplicates: Boolean
}

input CapturedCreateManyTrainerInput {
  gender: Gender
  id: Int
  level: Int
  pokemonId: Int!
}

input CapturedCreateManyTrainerInputEnvelope {
  data: [CapturedCreateManyTrainerInput!]!
  skipDuplicates: Boolean
}

input CapturedCreateNestedManyWithoutPokemonInput {
  connect: [CapturedWhereUniqueInput!]
  connectOrCreate: [CapturedCreateOrConnectWithoutPokemonInput!]
  create: [CapturedCreateWithoutPokemonInput!]
  createMany: CapturedCreateManyPokemonInputEnvelope
}

input CapturedCreateNestedManyWithoutTrainerInput {
  connect: [CapturedWhereUniqueInput!]
  connectOrCreate: [CapturedCreateOrConnectWithoutTrainerInput!]
  create: [CapturedCreateWithoutTrainerInput!]
  createMany: CapturedCreateManyTrainerInputEnvelope
}

input CapturedCreateOrConnectWithoutPokemonInput {
  create: CapturedCreateWithoutPokemonInput!
  where: CapturedWhereUniqueInput!
}

input CapturedCreateOrConnectWithoutTrainerInput {
  create: CapturedCreateWithoutTrainerInput!
  where: CapturedWhereUniqueInput!
}

input CapturedCreateWithoutPokemonInput {
  gender: Gender
  level: Int
  trainer: TrainerCreateNestedOneWithoutCapturedInput!
}

input CapturedCreateWithoutTrainerInput {
  gender: Gender
  level: Int
  pokemon: PokemonCreateNestedOneWithoutCapturedInput!
}

type CapturedGroupBy {
  _avg: CapturedAvgAggregate
  _count: CapturedCountAggregate
  _max: CapturedMaxAggregate
  _min: CapturedMinAggregate
  _sum: CapturedSumAggregate
  gender: Gender
  id: Int!
  level: Int
  pokemonId: Int!
  trainerId: Int!
}

input CapturedListRelationFilter {
  every: CapturedWhereInput
  none: CapturedWhereInput
  some: CapturedWhereInput
}

type CapturedMaxAggregate {
  gender: Gender
  id: Int
  level: Int
  pokemonId: Int
  trainerId: Int
}

input CapturedMaxOrderByAggregateInput {
  gender: SortOrder
  id: SortOrder
  level: SortOrder
  pokemonId: SortOrder
  trainerId: SortOrder
}

type CapturedMinAggregate {
  gender: Gender
  id: Int
  level: Int
  pokemonId: Int
  trainerId: Int
}

input CapturedMinOrderByAggregateInput {
  gender: SortOrder
  id: SortOrder
  level: SortOrder
  pokemonId: SortOrder
  trainerId: SortOrder
}

input CapturedOrderByRelationAggregateInput {
  _count: SortOrder
}

input CapturedOrderByWithAggregationInput {
  _avg: CapturedAvgOrderByAggregateInput
  _count: CapturedCountOrderByAggregateInput
  _max: CapturedMaxOrderByAggregateInput
  _min: CapturedMinOrderByAggregateInput
  _sum: CapturedSumOrderByAggregateInput
  gender: SortOrder
  id: SortOrder
  level: SortOrder
  pokemonId: SortOrder
  trainerId: SortOrder
}

input CapturedOrderByWithRelationInput {
  gender: SortOrder
  id: SortOrder
  level: SortOrder
  pokemon: PokemonOrderByWithRelationInput
  pokemonId: SortOrder
  trainer: TrainerOrderByWithRelationInput
  trainerId: SortOrder
}

enum CapturedScalarFieldEnum {
  gender
  id
  level
  pokemonId
  trainerId
}

input CapturedScalarWhereInput {
  AND: [CapturedScalarWhereInput!]
  NOT: [CapturedScalarWhereInput!]
  OR: [CapturedScalarWhereInput!]
  gender: EnumGenderNullableFilter
  id: IntFilter
  level: IntNullableFilter
  pokemonId: IntFilter
  trainerId: IntFilter
}

input CapturedScalarWhereWithAggregatesInput {
  AND: [CapturedScalarWhereWithAggregatesInput!]
  NOT: [CapturedScalarWhereWithAggregatesInput!]
  OR: [CapturedScalarWhereWithAggregatesInput!]
  gender: EnumGenderNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  level: IntNullableWithAggregatesFilter
  pokemonId: IntWithAggregatesFilter
  trainerId: IntWithAggregatesFilter
}

type CapturedSumAggregate {
  id: Int
  level: Int
  pokemonId: Int
  trainerId: Int
}

input CapturedSumOrderByAggregateInput {
  id: SortOrder
  level: SortOrder
  pokemonId: SortOrder
  trainerId: SortOrder
}

input CapturedUpdateInput {
  gender: NullableEnumGenderFieldUpdateOperationsInput
  level: NullableIntFieldUpdateOperationsInput
  pokemon: PokemonUpdateOneRequiredWithoutCapturedInput
  trainer: TrainerUpdateOneRequiredWithoutCapturedInput
}

input CapturedUpdateManyMutationInput {
  gender: NullableEnumGenderFieldUpdateOperationsInput
  level: NullableIntFieldUpdateOperationsInput
}

input CapturedUpdateManyWithWhereWithoutPokemonInput {
  data: CapturedUpdateManyMutationInput!
  where: CapturedScalarWhereInput!
}

input CapturedUpdateManyWithWhereWithoutTrainerInput {
  data: CapturedUpdateManyMutationInput!
  where: CapturedScalarWhereInput!
}

input CapturedUpdateManyWithoutPokemonInput {
  connect: [CapturedWhereUniqueInput!]
  connectOrCreate: [CapturedCreateOrConnectWithoutPokemonInput!]
  create: [CapturedCreateWithoutPokemonInput!]
  createMany: CapturedCreateManyPokemonInputEnvelope
  delete: [CapturedWhereUniqueInput!]
  deleteMany: [CapturedScalarWhereInput!]
  disconnect: [CapturedWhereUniqueInput!]
  set: [CapturedWhereUniqueInput!]
  update: [CapturedUpdateWithWhereUniqueWithoutPokemonInput!]
  updateMany: [CapturedUpdateManyWithWhereWithoutPokemonInput!]
  upsert: [CapturedUpsertWithWhereUniqueWithoutPokemonInput!]
}

input CapturedUpdateManyWithoutTrainerInput {
  connect: [CapturedWhereUniqueInput!]
  connectOrCreate: [CapturedCreateOrConnectWithoutTrainerInput!]
  create: [CapturedCreateWithoutTrainerInput!]
  createMany: CapturedCreateManyTrainerInputEnvelope
  delete: [CapturedWhereUniqueInput!]
  deleteMany: [CapturedScalarWhereInput!]
  disconnect: [CapturedWhereUniqueInput!]
  set: [CapturedWhereUniqueInput!]
  update: [CapturedUpdateWithWhereUniqueWithoutTrainerInput!]
  updateMany: [CapturedUpdateManyWithWhereWithoutTrainerInput!]
  upsert: [CapturedUpsertWithWhereUniqueWithoutTrainerInput!]
}

input CapturedUpdateWithWhereUniqueWithoutPokemonInput {
  data: CapturedUpdateWithoutPokemonInput!
  where: CapturedWhereUniqueInput!
}

input CapturedUpdateWithWhereUniqueWithoutTrainerInput {
  data: CapturedUpdateWithoutTrainerInput!
  where: CapturedWhereUniqueInput!
}

input CapturedUpdateWithoutPokemonInput {
  gender: NullableEnumGenderFieldUpdateOperationsInput
  level: NullableIntFieldUpdateOperationsInput
  trainer: TrainerUpdateOneRequiredWithoutCapturedInput
}

input CapturedUpdateWithoutTrainerInput {
  gender: NullableEnumGenderFieldUpdateOperationsInput
  level: NullableIntFieldUpdateOperationsInput
  pokemon: PokemonUpdateOneRequiredWithoutCapturedInput
}

input CapturedUpsertWithWhereUniqueWithoutPokemonInput {
  create: CapturedCreateWithoutPokemonInput!
  update: CapturedUpdateWithoutPokemonInput!
  where: CapturedWhereUniqueInput!
}

input CapturedUpsertWithWhereUniqueWithoutTrainerInput {
  create: CapturedCreateWithoutTrainerInput!
  update: CapturedUpdateWithoutTrainerInput!
  where: CapturedWhereUniqueInput!
}

input CapturedWhereInput {
  AND: [CapturedWhereInput!]
  NOT: [CapturedWhereInput!]
  OR: [CapturedWhereInput!]
  gender: EnumGenderNullableFilter
  id: IntFilter
  level: IntNullableFilter
  pokemon: PokemonRelationFilter
  pokemonId: IntFilter
  trainer: TrainerRelationFilter
  trainerId: IntFilter
}

input CapturedWhereUniqueInput {
  id: Int
}

type Classification {
  _count: ClassificationCount
  classification: String!
  id: Int!
  pokemon(cursor: PokemonWhereUniqueInput, distinct: [PokemonScalarFieldEnum!], orderBy: [PokemonOrderByWithRelationInput!], skip: Int, take: Int, where: PokemonWhereInput): [Pokemon!]!
}

type ClassificationAvgAggregate {
  id: Float
}

input ClassificationAvgOrderByAggregateInput {
  id: SortOrder
}

type ClassificationCount {
  pokemon: Int!
}

type ClassificationCountAggregate {
  _all: Int!
  classification: Int!
  id: Int!
}

input ClassificationCountOrderByAggregateInput {
  classification: SortOrder
  id: SortOrder
}

input ClassificationCreateInput {
  classification: String!
  pokemon: PokemonCreateNestedManyWithoutClassificationInput
}

input ClassificationCreateManyInput {
  classification: String!
  id: Int
}

input ClassificationCreateNestedOneWithoutPokemonInput {
  connect: ClassificationWhereUniqueInput
  connectOrCreate: ClassificationCreateOrConnectWithoutPokemonInput
  create: ClassificationCreateWithoutPokemonInput
}

input ClassificationCreateOrConnectWithoutPokemonInput {
  create: ClassificationCreateWithoutPokemonInput!
  where: ClassificationWhereUniqueInput!
}

input ClassificationCreateWithoutPokemonInput {
  classification: String!
}

type ClassificationGroupBy {
  _avg: ClassificationAvgAggregate
  _count: ClassificationCountAggregate
  _max: ClassificationMaxAggregate
  _min: ClassificationMinAggregate
  _sum: ClassificationSumAggregate
  classification: String!
  id: Int!
}

type ClassificationMaxAggregate {
  classification: String
  id: Int
}

input ClassificationMaxOrderByAggregateInput {
  classification: SortOrder
  id: SortOrder
}

type ClassificationMinAggregate {
  classification: String
  id: Int
}

input ClassificationMinOrderByAggregateInput {
  classification: SortOrder
  id: SortOrder
}

input ClassificationOrderByWithAggregationInput {
  _avg: ClassificationAvgOrderByAggregateInput
  _count: ClassificationCountOrderByAggregateInput
  _max: ClassificationMaxOrderByAggregateInput
  _min: ClassificationMinOrderByAggregateInput
  _sum: ClassificationSumOrderByAggregateInput
  classification: SortOrder
  id: SortOrder
}

input ClassificationOrderByWithRelationInput {
  classification: SortOrder
  id: SortOrder
  pokemon: PokemonOrderByRelationAggregateInput
}

input ClassificationRelationFilter {
  is: ClassificationWhereInput
  isNot: ClassificationWhereInput
}

enum ClassificationScalarFieldEnum {
  classification
  id
}

input ClassificationScalarWhereWithAggregatesInput {
  AND: [ClassificationScalarWhereWithAggregatesInput!]
  NOT: [ClassificationScalarWhereWithAggregatesInput!]
  OR: [ClassificationScalarWhereWithAggregatesInput!]
  classification: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
}

type ClassificationSumAggregate {
  id: Int
}

input ClassificationSumOrderByAggregateInput {
  id: SortOrder
}

input ClassificationUpdateInput {
  classification: StringFieldUpdateOperationsInput
  pokemon: PokemonUpdateManyWithoutClassificationInput
}

input ClassificationUpdateManyMutationInput {
  classification: StringFieldUpdateOperationsInput
}

input ClassificationUpdateOneRequiredWithoutPokemonInput {
  connect: ClassificationWhereUniqueInput
  connectOrCreate: ClassificationCreateOrConnectWithoutPokemonInput
  create: ClassificationCreateWithoutPokemonInput
  update: ClassificationUpdateWithoutPokemonInput
  upsert: ClassificationUpsertWithoutPokemonInput
}

input ClassificationUpdateWithoutPokemonInput {
  classification: StringFieldUpdateOperationsInput
}

input ClassificationUpsertWithoutPokemonInput {
  create: ClassificationCreateWithoutPokemonInput!
  update: ClassificationUpdateWithoutPokemonInput!
}

input ClassificationWhereInput {
  AND: [ClassificationWhereInput!]
  NOT: [ClassificationWhereInput!]
  OR: [ClassificationWhereInput!]
  classification: StringFilter
  id: IntFilter
  pokemon: PokemonListRelationFilter
}

input ClassificationWhereUniqueInput {
  classification: String
  id: Int
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input EnumGenderNullableFilter {
  equals: Gender
  in: [Gender!]
  not: NestedEnumGenderNullableFilter
  notIn: [Gender!]
}

input EnumGenderNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumGenderNullableFilter
  _min: NestedEnumGenderNullableFilter
  equals: Gender
  in: [Gender!]
  not: NestedEnumGenderNullableWithAggregatesFilter
  notIn: [Gender!]
}

input EnumStatusFieldUpdateOperationsInput {
  set: Status
}

input EnumStatusFilter {
  equals: Status
  in: [Status!]
  not: NestedEnumStatusFilter
  notIn: [Status!]
}

input EnumStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumStatusFilter
  _min: NestedEnumStatusFilter
  equals: Status
  in: [Status!]
  not: NestedEnumStatusWithAggregatesFilter
  notIn: [Status!]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input FloatNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedFloatNullableFilter
  _min: NestedFloatNullableFilter
  _sum: NestedFloatNullableFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableWithAggregatesFilter
  notIn: [Float!]
}

input FloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float!]
}

enum Gender {
  Female
  Male
  Unsexed
}

type Generation {
  _count: GenerationCount
  generation: Int!
  id: Int!
  pokemon(cursor: PokemonWhereUniqueInput, distinct: [PokemonScalarFieldEnum!], orderBy: [PokemonOrderByWithRelationInput!], skip: Int, take: Int, where: PokemonWhereInput): [Pokemon!]!
}

type GenerationAvgAggregate {
  generation: Float
  id: Float
}

input GenerationAvgOrderByAggregateInput {
  generation: SortOrder
  id: SortOrder
}

type GenerationCount {
  pokemon: Int!
}

type GenerationCountAggregate {
  _all: Int!
  generation: Int!
  id: Int!
}

input GenerationCountOrderByAggregateInput {
  generation: SortOrder
  id: SortOrder
}

input GenerationCreateInput {
  generation: Int!
  pokemon: PokemonCreateNestedManyWithoutGenerationInput
}

input GenerationCreateManyInput {
  generation: Int!
  id: Int
}

input GenerationCreateNestedOneWithoutPokemonInput {
  connect: GenerationWhereUniqueInput
  connectOrCreate: GenerationCreateOrConnectWithoutPokemonInput
  create: GenerationCreateWithoutPokemonInput
}

input GenerationCreateOrConnectWithoutPokemonInput {
  create: GenerationCreateWithoutPokemonInput!
  where: GenerationWhereUniqueInput!
}

input GenerationCreateWithoutPokemonInput {
  generation: Int!
}

type GenerationGroupBy {
  _avg: GenerationAvgAggregate
  _count: GenerationCountAggregate
  _max: GenerationMaxAggregate
  _min: GenerationMinAggregate
  _sum: GenerationSumAggregate
  generation: Int!
  id: Int!
}

type GenerationMaxAggregate {
  generation: Int
  id: Int
}

input GenerationMaxOrderByAggregateInput {
  generation: SortOrder
  id: SortOrder
}

type GenerationMinAggregate {
  generation: Int
  id: Int
}

input GenerationMinOrderByAggregateInput {
  generation: SortOrder
  id: SortOrder
}

input GenerationOrderByWithAggregationInput {
  _avg: GenerationAvgOrderByAggregateInput
  _count: GenerationCountOrderByAggregateInput
  _max: GenerationMaxOrderByAggregateInput
  _min: GenerationMinOrderByAggregateInput
  _sum: GenerationSumOrderByAggregateInput
  generation: SortOrder
  id: SortOrder
}

input GenerationOrderByWithRelationInput {
  generation: SortOrder
  id: SortOrder
  pokemon: PokemonOrderByRelationAggregateInput
}

input GenerationRelationFilter {
  is: GenerationWhereInput
  isNot: GenerationWhereInput
}

enum GenerationScalarFieldEnum {
  generation
  id
}

input GenerationScalarWhereWithAggregatesInput {
  AND: [GenerationScalarWhereWithAggregatesInput!]
  NOT: [GenerationScalarWhereWithAggregatesInput!]
  OR: [GenerationScalarWhereWithAggregatesInput!]
  generation: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
}

type GenerationSumAggregate {
  generation: Int
  id: Int
}

input GenerationSumOrderByAggregateInput {
  generation: SortOrder
  id: SortOrder
}

input GenerationUpdateInput {
  generation: IntFieldUpdateOperationsInput
  pokemon: PokemonUpdateManyWithoutGenerationInput
}

input GenerationUpdateManyMutationInput {
  generation: IntFieldUpdateOperationsInput
}

input GenerationUpdateOneRequiredWithoutPokemonInput {
  connect: GenerationWhereUniqueInput
  connectOrCreate: GenerationCreateOrConnectWithoutPokemonInput
  create: GenerationCreateWithoutPokemonInput
  update: GenerationUpdateWithoutPokemonInput
  upsert: GenerationUpsertWithoutPokemonInput
}

input GenerationUpdateWithoutPokemonInput {
  generation: IntFieldUpdateOperationsInput
}

input GenerationUpsertWithoutPokemonInput {
  create: GenerationCreateWithoutPokemonInput!
  update: GenerationUpdateWithoutPokemonInput!
}

input GenerationWhereInput {
  AND: [GenerationWhereInput!]
  NOT: [GenerationWhereInput!]
  OR: [GenerationWhereInput!]
  generation: IntFilter
  id: IntFilter
  pokemon: PokemonListRelationFilter
}

input GenerationWhereUniqueInput {
  generation: Int
  id: Int
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createAbility(data: AbilityCreateInput!): Ability!
  createCaptured(data: CapturedCreateInput!): Captured!
  createClassification(data: ClassificationCreateInput!): Classification!
  createGeneration(data: GenerationCreateInput!): Generation!
  createManyAbility(data: [AbilityCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyCaptured(data: [CapturedCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyClassification(data: [ClassificationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyGeneration(data: [GenerationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPokedex(data: [PokedexCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPokemon(data: [PokemonCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPokemonAbilities(data: [PokemonAbilitiesCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPokemonTypes(data: [PokemonTypesCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTrainer(data: [TrainerCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyType(data: [TypeCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createPokedex(data: PokedexCreateInput!): Pokedex!
  createPokemon(data: PokemonCreateInput!): Pokemon!
  createPokemonAbilities(data: PokemonAbilitiesCreateInput!): PokemonAbilities!
  createPokemonTypes(data: PokemonTypesCreateInput!): PokemonTypes!
  createTrainer(data: TrainerCreateInput!): Trainer!
  createType(data: TypeCreateInput!): Type!
  deleteAbility(where: AbilityWhereUniqueInput!): Ability
  deleteCaptured(where: CapturedWhereUniqueInput!): Captured
  deleteClassification(where: ClassificationWhereUniqueInput!): Classification
  deleteGeneration(where: GenerationWhereUniqueInput!): Generation
  deleteManyAbility(where: AbilityWhereInput): AffectedRowsOutput!
  deleteManyCaptured(where: CapturedWhereInput): AffectedRowsOutput!
  deleteManyClassification(where: ClassificationWhereInput): AffectedRowsOutput!
  deleteManyGeneration(where: GenerationWhereInput): AffectedRowsOutput!
  deleteManyPokedex(where: PokedexWhereInput): AffectedRowsOutput!
  deleteManyPokemon(where: PokemonWhereInput): AffectedRowsOutput!
  deleteManyPokemonAbilities(where: PokemonAbilitiesWhereInput): AffectedRowsOutput!
  deleteManyPokemonTypes(where: PokemonTypesWhereInput): AffectedRowsOutput!
  deleteManyTrainer(where: TrainerWhereInput): AffectedRowsOutput!
  deleteManyType(where: TypeWhereInput): AffectedRowsOutput!
  deletePokedex(where: PokedexWhereUniqueInput!): Pokedex
  deletePokemon(where: PokemonWhereUniqueInput!): Pokemon
  deletePokemonAbilities(where: PokemonAbilitiesWhereUniqueInput!): PokemonAbilities
  deletePokemonTypes(where: PokemonTypesWhereUniqueInput!): PokemonTypes
  deleteTrainer(where: TrainerWhereUniqueInput!): Trainer
  deleteType(where: TypeWhereUniqueInput!): Type
  updateAbility(data: AbilityUpdateInput!, where: AbilityWhereUniqueInput!): Ability
  updateCaptured(data: CapturedUpdateInput!, where: CapturedWhereUniqueInput!): Captured
  updateClassification(data: ClassificationUpdateInput!, where: ClassificationWhereUniqueInput!): Classification
  updateGeneration(data: GenerationUpdateInput!, where: GenerationWhereUniqueInput!): Generation
  updateManyAbility(data: AbilityUpdateManyMutationInput!, where: AbilityWhereInput): AffectedRowsOutput!
  updateManyCaptured(data: CapturedUpdateManyMutationInput!, where: CapturedWhereInput): AffectedRowsOutput!
  updateManyClassification(data: ClassificationUpdateManyMutationInput!, where: ClassificationWhereInput): AffectedRowsOutput!
  updateManyGeneration(data: GenerationUpdateManyMutationInput!, where: GenerationWhereInput): AffectedRowsOutput!
  updateManyPokedex(data: PokedexUpdateManyMutationInput!, where: PokedexWhereInput): AffectedRowsOutput!
  updateManyPokemon(data: PokemonUpdateManyMutationInput!, where: PokemonWhereInput): AffectedRowsOutput!
  updateManyPokemonAbilities(data: PokemonAbilitiesUpdateManyMutationInput!, where: PokemonAbilitiesWhereInput): AffectedRowsOutput!
  updateManyPokemonTypes(data: PokemonTypesUpdateManyMutationInput!, where: PokemonTypesWhereInput): AffectedRowsOutput!
  updateManyTrainer(data: TrainerUpdateManyMutationInput!, where: TrainerWhereInput): AffectedRowsOutput!
  updateManyType(data: TypeUpdateManyMutationInput!, where: TypeWhereInput): AffectedRowsOutput!
  updatePokedex(data: PokedexUpdateInput!, where: PokedexWhereUniqueInput!): Pokedex
  updatePokemon(data: PokemonUpdateInput!, where: PokemonWhereUniqueInput!): Pokemon
  updatePokemonAbilities(data: PokemonAbilitiesUpdateInput!, where: PokemonAbilitiesWhereUniqueInput!): PokemonAbilities
  updatePokemonTypes(data: PokemonTypesUpdateInput!, where: PokemonTypesWhereUniqueInput!): PokemonTypes
  updateTrainer(data: TrainerUpdateInput!, where: TrainerWhereUniqueInput!): Trainer
  updateType(data: TypeUpdateInput!, where: TypeWhereUniqueInput!): Type
  upsertAbility(create: AbilityCreateInput!, update: AbilityUpdateInput!, where: AbilityWhereUniqueInput!): Ability!
  upsertCaptured(create: CapturedCreateInput!, update: CapturedUpdateInput!, where: CapturedWhereUniqueInput!): Captured!
  upsertClassification(create: ClassificationCreateInput!, update: ClassificationUpdateInput!, where: ClassificationWhereUniqueInput!): Classification!
  upsertGeneration(create: GenerationCreateInput!, update: GenerationUpdateInput!, where: GenerationWhereUniqueInput!): Generation!
  upsertPokedex(create: PokedexCreateInput!, update: PokedexUpdateInput!, where: PokedexWhereUniqueInput!): Pokedex!
  upsertPokemon(create: PokemonCreateInput!, update: PokemonUpdateInput!, where: PokemonWhereUniqueInput!): Pokemon!
  upsertPokemonAbilities(create: PokemonAbilitiesCreateInput!, update: PokemonAbilitiesUpdateInput!, where: PokemonAbilitiesWhereUniqueInput!): PokemonAbilities!
  upsertPokemonTypes(create: PokemonTypesCreateInput!, update: PokemonTypesUpdateInput!, where: PokemonTypesWhereUniqueInput!): PokemonTypes!
  upsertTrainer(create: TrainerCreateInput!, update: TrainerUpdateInput!, where: TrainerWhereUniqueInput!): Trainer!
  upsertType(create: TypeCreateInput!, update: TypeUpdateInput!, where: TypeWhereUniqueInput!): Type!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumGenderNullableFilter {
  equals: Gender
  in: [Gender!]
  not: NestedEnumGenderNullableFilter
  notIn: [Gender!]
}

input NestedEnumGenderNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumGenderNullableFilter
  _min: NestedEnumGenderNullableFilter
  equals: Gender
  in: [Gender!]
  not: NestedEnumGenderNullableWithAggregatesFilter
  notIn: [Gender!]
}

input NestedEnumStatusFilter {
  equals: Status
  in: [Status!]
  not: NestedEnumStatusFilter
  notIn: [Status!]
}

input NestedEnumStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumStatusFilter
  _min: NestedEnumStatusFilter
  equals: Status
  in: [Status!]
  not: NestedEnumStatusWithAggregatesFilter
  notIn: [Status!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedFloatNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedFloatNullableFilter
  _min: NestedFloatNullableFilter
  _sum: NestedFloatNullableFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableWithAggregatesFilter
  notIn: [Float!]
}

input NestedFloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableEnumGenderFieldUpdateOperationsInput {
  set: Gender
}

input NullableFloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

type Pokedex {
  createdAt: DateTime!
  expiresAt: DateTime
  id: Int!
  pokemon: Pokemon!
  pokemonId: Int!
  updatedAt: DateTime!
}

type PokedexAvgAggregate {
  id: Float
  pokemonId: Float
}

input PokedexAvgOrderByAggregateInput {
  id: SortOrder
  pokemonId: SortOrder
}

type PokedexCountAggregate {
  _all: Int!
  createdAt: Int!
  expiresAt: Int!
  id: Int!
  pokemonId: Int!
  updatedAt: Int!
}

input PokedexCountOrderByAggregateInput {
  createdAt: SortOrder
  expiresAt: SortOrder
  id: SortOrder
  pokemonId: SortOrder
  updatedAt: SortOrder
}

input PokedexCreateInput {
  createdAt: DateTime
  expiresAt: DateTime
  pokemon: PokemonCreateNestedOneWithoutPokedex_numberInput
  updatedAt: DateTime
}

input PokedexCreateManyInput {
  createdAt: DateTime
  expiresAt: DateTime
  id: Int
  pokemonId: Int
  updatedAt: DateTime
}

input PokedexCreateNestedOneWithoutPokemonInput {
  connect: PokedexWhereUniqueInput
  connectOrCreate: PokedexCreateOrConnectWithoutPokemonInput
  create: PokedexCreateWithoutPokemonInput
}

input PokedexCreateOrConnectWithoutPokemonInput {
  create: PokedexCreateWithoutPokemonInput!
  where: PokedexWhereUniqueInput!
}

input PokedexCreateWithoutPokemonInput {
  createdAt: DateTime
  expiresAt: DateTime
  updatedAt: DateTime
}

type PokedexGroupBy {
  _avg: PokedexAvgAggregate
  _count: PokedexCountAggregate
  _max: PokedexMaxAggregate
  _min: PokedexMinAggregate
  _sum: PokedexSumAggregate
  createdAt: DateTime!
  expiresAt: DateTime
  id: Int!
  pokemonId: Int!
  updatedAt: DateTime!
}

type PokedexMaxAggregate {
  createdAt: DateTime
  expiresAt: DateTime
  id: Int
  pokemonId: Int
  updatedAt: DateTime
}

input PokedexMaxOrderByAggregateInput {
  createdAt: SortOrder
  expiresAt: SortOrder
  id: SortOrder
  pokemonId: SortOrder
  updatedAt: SortOrder
}

type PokedexMinAggregate {
  createdAt: DateTime
  expiresAt: DateTime
  id: Int
  pokemonId: Int
  updatedAt: DateTime
}

input PokedexMinOrderByAggregateInput {
  createdAt: SortOrder
  expiresAt: SortOrder
  id: SortOrder
  pokemonId: SortOrder
  updatedAt: SortOrder
}

input PokedexOrderByWithAggregationInput {
  _avg: PokedexAvgOrderByAggregateInput
  _count: PokedexCountOrderByAggregateInput
  _max: PokedexMaxOrderByAggregateInput
  _min: PokedexMinOrderByAggregateInput
  _sum: PokedexSumOrderByAggregateInput
  createdAt: SortOrder
  expiresAt: SortOrder
  id: SortOrder
  pokemonId: SortOrder
  updatedAt: SortOrder
}

input PokedexOrderByWithRelationInput {
  createdAt: SortOrder
  expiresAt: SortOrder
  id: SortOrder
  pokemon: PokemonOrderByWithRelationInput
  pokemonId: SortOrder
  updatedAt: SortOrder
}

input PokedexRelationFilter {
  is: PokedexWhereInput
  isNot: PokedexWhereInput
}

enum PokedexScalarFieldEnum {
  createdAt
  expiresAt
  id
  pokemonId
  updatedAt
}

input PokedexScalarWhereWithAggregatesInput {
  AND: [PokedexScalarWhereWithAggregatesInput!]
  NOT: [PokedexScalarWhereWithAggregatesInput!]
  OR: [PokedexScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  expiresAt: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  pokemonId: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type PokedexSumAggregate {
  id: Int
  pokemonId: Int
}

input PokedexSumOrderByAggregateInput {
  id: SortOrder
  pokemonId: SortOrder
}

input PokedexUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: NullableDateTimeFieldUpdateOperationsInput
  pokemon: PokemonUpdateOneRequiredWithoutPokedex_numberInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PokedexUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PokedexUpdateOneWithoutPokemonInput {
  connect: PokedexWhereUniqueInput
  connectOrCreate: PokedexCreateOrConnectWithoutPokemonInput
  create: PokedexCreateWithoutPokemonInput
  delete: Boolean
  disconnect: Boolean
  update: PokedexUpdateWithoutPokemonInput
  upsert: PokedexUpsertWithoutPokemonInput
}

input PokedexUpdateWithoutPokemonInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PokedexUpsertWithoutPokemonInput {
  create: PokedexCreateWithoutPokemonInput!
  update: PokedexUpdateWithoutPokemonInput!
}

input PokedexWhereInput {
  AND: [PokedexWhereInput!]
  NOT: [PokedexWhereInput!]
  OR: [PokedexWhereInput!]
  createdAt: DateTimeFilter
  expiresAt: DateTimeNullableFilter
  id: IntFilter
  pokemon: PokemonRelationFilter
  pokemonId: IntFilter
  updatedAt: DateTimeFilter
}

input PokedexWhereUniqueInput {
  id: Int
  pokemonId: Int
}

type Pokemon {
  Captured(cursor: CapturedWhereUniqueInput, distinct: [CapturedScalarFieldEnum!], orderBy: [CapturedOrderByWithRelationInput!], skip: Int, take: Int, where: CapturedWhereInput): [Captured!]!
  _count: PokemonCount
  abilities(cursor: PokemonAbilitiesWhereUniqueInput, distinct: [PokemonAbilitiesScalarFieldEnum!], orderBy: [PokemonAbilitiesOrderByWithRelationInput!], skip: Int, take: Int, where: PokemonAbilitiesWhereInput): [PokemonAbilities!]!
  against_bug: Float!
  against_dark: Float!
  against_dragon: Float!
  against_electric: Float!
  against_fairy: Float!
  against_fight: Float!
  against_fire: Float
  against_flying: Float!
  against_ghost: Float!
  against_grass: Float
  against_ground: Float!
  against_ice: Float!
  against_normal: Float
  against_poison: Float!
  against_psychic: Float!
  against_rock: Float!
  against_steel: Float!
  against_water: Float
  attack: Int!
  base_egg_steps: Int!
  base_happiness: Int!
  base_total: Int!
  capture_rate: Float
  classification: Classification!
  classificationId: Int!
  defense: Int!
  experience_growth: Int!
  generation: Generation!
  generationId: Int!
  height_m: Float!
  hp: Int!
  id: Int!
  is_legendary: Boolean!
  japanese_name: String!
  name: String!
  percentage_male: Float!
  pokedex_number: Pokedex
  sp_attack: Int!
  sp_defense: Int!
  speed: Int!
  status: Status!
  types(cursor: PokemonTypesWhereUniqueInput, distinct: [PokemonTypesScalarFieldEnum!], orderBy: [PokemonTypesOrderByWithRelationInput!], skip: Int, take: Int, where: PokemonTypesWhereInput): [PokemonTypes!]!
  weight_kg: Float!
}

type PokemonAbilities {
  ability: Ability!
  abilityId: Int!
  createdAt: DateTime!
  expiresAt: DateTime
  pokemon: Pokemon!
  pokemonId: Int!
  updatedAt: DateTime!
}

type PokemonAbilitiesAvgAggregate {
  abilityId: Float
  pokemonId: Float
}

input PokemonAbilitiesAvgOrderByAggregateInput {
  abilityId: SortOrder
  pokemonId: SortOrder
}

type PokemonAbilitiesCountAggregate {
  _all: Int!
  abilityId: Int!
  createdAt: Int!
  expiresAt: Int!
  pokemonId: Int!
  updatedAt: Int!
}

input PokemonAbilitiesCountOrderByAggregateInput {
  abilityId: SortOrder
  createdAt: SortOrder
  expiresAt: SortOrder
  pokemonId: SortOrder
  updatedAt: SortOrder
}

input PokemonAbilitiesCreateInput {
  ability: AbilityCreateNestedOneWithoutPokemonAbilitiesInput
  createdAt: DateTime
  expiresAt: DateTime
  pokemon: PokemonCreateNestedOneWithoutAbilitiesInput
  updatedAt: DateTime
}

input PokemonAbilitiesCreateManyAbilityInput {
  createdAt: DateTime
  expiresAt: DateTime
  pokemonId: Int
  updatedAt: DateTime
}

input PokemonAbilitiesCreateManyAbilityInputEnvelope {
  data: [PokemonAbilitiesCreateManyAbilityInput!]!
  skipDuplicates: Boolean
}

input PokemonAbilitiesCreateManyInput {
  abilityId: Int
  createdAt: DateTime
  expiresAt: DateTime
  pokemonId: Int
  updatedAt: DateTime
}

input PokemonAbilitiesCreateManyPokemonInput {
  abilityId: Int
  createdAt: DateTime
  expiresAt: DateTime
  updatedAt: DateTime
}

input PokemonAbilitiesCreateManyPokemonInputEnvelope {
  data: [PokemonAbilitiesCreateManyPokemonInput!]!
  skipDuplicates: Boolean
}

input PokemonAbilitiesCreateNestedManyWithoutAbilityInput {
  connect: [PokemonAbilitiesWhereUniqueInput!]
  connectOrCreate: [PokemonAbilitiesCreateOrConnectWithoutAbilityInput!]
  create: [PokemonAbilitiesCreateWithoutAbilityInput!]
  createMany: PokemonAbilitiesCreateManyAbilityInputEnvelope
}

input PokemonAbilitiesCreateNestedManyWithoutPokemonInput {
  connect: [PokemonAbilitiesWhereUniqueInput!]
  connectOrCreate: [PokemonAbilitiesCreateOrConnectWithoutPokemonInput!]
  create: [PokemonAbilitiesCreateWithoutPokemonInput!]
  createMany: PokemonAbilitiesCreateManyPokemonInputEnvelope
}

input PokemonAbilitiesCreateOrConnectWithoutAbilityInput {
  create: PokemonAbilitiesCreateWithoutAbilityInput!
  where: PokemonAbilitiesWhereUniqueInput!
}

input PokemonAbilitiesCreateOrConnectWithoutPokemonInput {
  create: PokemonAbilitiesCreateWithoutPokemonInput!
  where: PokemonAbilitiesWhereUniqueInput!
}

input PokemonAbilitiesCreateWithoutAbilityInput {
  createdAt: DateTime
  expiresAt: DateTime
  pokemon: PokemonCreateNestedOneWithoutAbilitiesInput
  updatedAt: DateTime
}

input PokemonAbilitiesCreateWithoutPokemonInput {
  ability: AbilityCreateNestedOneWithoutPokemonAbilitiesInput
  createdAt: DateTime
  expiresAt: DateTime
  updatedAt: DateTime
}

type PokemonAbilitiesGroupBy {
  _avg: PokemonAbilitiesAvgAggregate
  _count: PokemonAbilitiesCountAggregate
  _max: PokemonAbilitiesMaxAggregate
  _min: PokemonAbilitiesMinAggregate
  _sum: PokemonAbilitiesSumAggregate
  abilityId: Int!
  createdAt: DateTime!
  expiresAt: DateTime
  pokemonId: Int!
  updatedAt: DateTime!
}

input PokemonAbilitiesListRelationFilter {
  every: PokemonAbilitiesWhereInput
  none: PokemonAbilitiesWhereInput
  some: PokemonAbilitiesWhereInput
}

type PokemonAbilitiesMaxAggregate {
  abilityId: Int
  createdAt: DateTime
  expiresAt: DateTime
  pokemonId: Int
  updatedAt: DateTime
}

input PokemonAbilitiesMaxOrderByAggregateInput {
  abilityId: SortOrder
  createdAt: SortOrder
  expiresAt: SortOrder
  pokemonId: SortOrder
  updatedAt: SortOrder
}

type PokemonAbilitiesMinAggregate {
  abilityId: Int
  createdAt: DateTime
  expiresAt: DateTime
  pokemonId: Int
  updatedAt: DateTime
}

input PokemonAbilitiesMinOrderByAggregateInput {
  abilityId: SortOrder
  createdAt: SortOrder
  expiresAt: SortOrder
  pokemonId: SortOrder
  updatedAt: SortOrder
}

input PokemonAbilitiesOrderByRelationAggregateInput {
  _count: SortOrder
}

input PokemonAbilitiesOrderByWithAggregationInput {
  _avg: PokemonAbilitiesAvgOrderByAggregateInput
  _count: PokemonAbilitiesCountOrderByAggregateInput
  _max: PokemonAbilitiesMaxOrderByAggregateInput
  _min: PokemonAbilitiesMinOrderByAggregateInput
  _sum: PokemonAbilitiesSumOrderByAggregateInput
  abilityId: SortOrder
  createdAt: SortOrder
  expiresAt: SortOrder
  pokemonId: SortOrder
  updatedAt: SortOrder
}

input PokemonAbilitiesOrderByWithRelationInput {
  ability: AbilityOrderByWithRelationInput
  abilityId: SortOrder
  createdAt: SortOrder
  expiresAt: SortOrder
  pokemon: PokemonOrderByWithRelationInput
  pokemonId: SortOrder
  updatedAt: SortOrder
}

input PokemonAbilitiesPokemonIdAbilityIdCompoundUniqueInput {
  abilityId: Int!
  pokemonId: Int!
}

enum PokemonAbilitiesScalarFieldEnum {
  abilityId
  createdAt
  expiresAt
  pokemonId
  updatedAt
}

input PokemonAbilitiesScalarWhereInput {
  AND: [PokemonAbilitiesScalarWhereInput!]
  NOT: [PokemonAbilitiesScalarWhereInput!]
  OR: [PokemonAbilitiesScalarWhereInput!]
  abilityId: IntFilter
  createdAt: DateTimeFilter
  expiresAt: DateTimeNullableFilter
  pokemonId: IntFilter
  updatedAt: DateTimeFilter
}

input PokemonAbilitiesScalarWhereWithAggregatesInput {
  AND: [PokemonAbilitiesScalarWhereWithAggregatesInput!]
  NOT: [PokemonAbilitiesScalarWhereWithAggregatesInput!]
  OR: [PokemonAbilitiesScalarWhereWithAggregatesInput!]
  abilityId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  expiresAt: DateTimeNullableWithAggregatesFilter
  pokemonId: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type PokemonAbilitiesSumAggregate {
  abilityId: Int
  pokemonId: Int
}

input PokemonAbilitiesSumOrderByAggregateInput {
  abilityId: SortOrder
  pokemonId: SortOrder
}

input PokemonAbilitiesUpdateInput {
  ability: AbilityUpdateOneRequiredWithoutPokemonAbilitiesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: NullableDateTimeFieldUpdateOperationsInput
  pokemon: PokemonUpdateOneRequiredWithoutAbilitiesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PokemonAbilitiesUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PokemonAbilitiesUpdateManyWithWhereWithoutAbilityInput {
  data: PokemonAbilitiesUpdateManyMutationInput!
  where: PokemonAbilitiesScalarWhereInput!
}

input PokemonAbilitiesUpdateManyWithWhereWithoutPokemonInput {
  data: PokemonAbilitiesUpdateManyMutationInput!
  where: PokemonAbilitiesScalarWhereInput!
}

input PokemonAbilitiesUpdateManyWithoutAbilityInput {
  connect: [PokemonAbilitiesWhereUniqueInput!]
  connectOrCreate: [PokemonAbilitiesCreateOrConnectWithoutAbilityInput!]
  create: [PokemonAbilitiesCreateWithoutAbilityInput!]
  createMany: PokemonAbilitiesCreateManyAbilityInputEnvelope
  delete: [PokemonAbilitiesWhereUniqueInput!]
  deleteMany: [PokemonAbilitiesScalarWhereInput!]
  disconnect: [PokemonAbilitiesWhereUniqueInput!]
  set: [PokemonAbilitiesWhereUniqueInput!]
  update: [PokemonAbilitiesUpdateWithWhereUniqueWithoutAbilityInput!]
  updateMany: [PokemonAbilitiesUpdateManyWithWhereWithoutAbilityInput!]
  upsert: [PokemonAbilitiesUpsertWithWhereUniqueWithoutAbilityInput!]
}

input PokemonAbilitiesUpdateManyWithoutPokemonInput {
  connect: [PokemonAbilitiesWhereUniqueInput!]
  connectOrCreate: [PokemonAbilitiesCreateOrConnectWithoutPokemonInput!]
  create: [PokemonAbilitiesCreateWithoutPokemonInput!]
  createMany: PokemonAbilitiesCreateManyPokemonInputEnvelope
  delete: [PokemonAbilitiesWhereUniqueInput!]
  deleteMany: [PokemonAbilitiesScalarWhereInput!]
  disconnect: [PokemonAbilitiesWhereUniqueInput!]
  set: [PokemonAbilitiesWhereUniqueInput!]
  update: [PokemonAbilitiesUpdateWithWhereUniqueWithoutPokemonInput!]
  updateMany: [PokemonAbilitiesUpdateManyWithWhereWithoutPokemonInput!]
  upsert: [PokemonAbilitiesUpsertWithWhereUniqueWithoutPokemonInput!]
}

input PokemonAbilitiesUpdateWithWhereUniqueWithoutAbilityInput {
  data: PokemonAbilitiesUpdateWithoutAbilityInput!
  where: PokemonAbilitiesWhereUniqueInput!
}

input PokemonAbilitiesUpdateWithWhereUniqueWithoutPokemonInput {
  data: PokemonAbilitiesUpdateWithoutPokemonInput!
  where: PokemonAbilitiesWhereUniqueInput!
}

input PokemonAbilitiesUpdateWithoutAbilityInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: NullableDateTimeFieldUpdateOperationsInput
  pokemon: PokemonUpdateOneRequiredWithoutAbilitiesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PokemonAbilitiesUpdateWithoutPokemonInput {
  ability: AbilityUpdateOneRequiredWithoutPokemonAbilitiesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PokemonAbilitiesUpsertWithWhereUniqueWithoutAbilityInput {
  create: PokemonAbilitiesCreateWithoutAbilityInput!
  update: PokemonAbilitiesUpdateWithoutAbilityInput!
  where: PokemonAbilitiesWhereUniqueInput!
}

input PokemonAbilitiesUpsertWithWhereUniqueWithoutPokemonInput {
  create: PokemonAbilitiesCreateWithoutPokemonInput!
  update: PokemonAbilitiesUpdateWithoutPokemonInput!
  where: PokemonAbilitiesWhereUniqueInput!
}

input PokemonAbilitiesWhereInput {
  AND: [PokemonAbilitiesWhereInput!]
  NOT: [PokemonAbilitiesWhereInput!]
  OR: [PokemonAbilitiesWhereInput!]
  ability: AbilityRelationFilter
  abilityId: IntFilter
  createdAt: DateTimeFilter
  expiresAt: DateTimeNullableFilter
  pokemon: PokemonRelationFilter
  pokemonId: IntFilter
  updatedAt: DateTimeFilter
}

input PokemonAbilitiesWhereUniqueInput {
  pokemonId_abilityId: PokemonAbilitiesPokemonIdAbilityIdCompoundUniqueInput
}

type PokemonAvgAggregate {
  against_bug: Float
  against_dark: Float
  against_dragon: Float
  against_electric: Float
  against_fairy: Float
  against_fight: Float
  against_fire: Float
  against_flying: Float
  against_ghost: Float
  against_grass: Float
  against_ground: Float
  against_ice: Float
  against_normal: Float
  against_poison: Float
  against_psychic: Float
  against_rock: Float
  against_steel: Float
  against_water: Float
  attack: Float
  base_egg_steps: Float
  base_happiness: Float
  base_total: Float
  capture_rate: Float
  classificationId: Float
  defense: Float
  experience_growth: Float
  generationId: Float
  height_m: Float
  hp: Float
  id: Float
  percentage_male: Float
  sp_attack: Float
  sp_defense: Float
  speed: Float
  weight_kg: Float
}

input PokemonAvgOrderByAggregateInput {
  against_bug: SortOrder
  against_dark: SortOrder
  against_dragon: SortOrder
  against_electric: SortOrder
  against_fairy: SortOrder
  against_fight: SortOrder
  against_fire: SortOrder
  against_flying: SortOrder
  against_ghost: SortOrder
  against_grass: SortOrder
  against_ground: SortOrder
  against_ice: SortOrder
  against_normal: SortOrder
  against_poison: SortOrder
  against_psychic: SortOrder
  against_rock: SortOrder
  against_steel: SortOrder
  against_water: SortOrder
  attack: SortOrder
  base_egg_steps: SortOrder
  base_happiness: SortOrder
  base_total: SortOrder
  capture_rate: SortOrder
  classificationId: SortOrder
  defense: SortOrder
  experience_growth: SortOrder
  generationId: SortOrder
  height_m: SortOrder
  hp: SortOrder
  id: SortOrder
  percentage_male: SortOrder
  sp_attack: SortOrder
  sp_defense: SortOrder
  speed: SortOrder
  weight_kg: SortOrder
}

type PokemonCount {
  Captured: Int!
  abilities: Int!
  types: Int!
}

type PokemonCountAggregate {
  _all: Int!
  against_bug: Int!
  against_dark: Int!
  against_dragon: Int!
  against_electric: Int!
  against_fairy: Int!
  against_fight: Int!
  against_fire: Int!
  against_flying: Int!
  against_ghost: Int!
  against_grass: Int!
  against_ground: Int!
  against_ice: Int!
  against_normal: Int!
  against_poison: Int!
  against_psychic: Int!
  against_rock: Int!
  against_steel: Int!
  against_water: Int!
  attack: Int!
  base_egg_steps: Int!
  base_happiness: Int!
  base_total: Int!
  capture_rate: Int!
  classificationId: Int!
  defense: Int!
  experience_growth: Int!
  generationId: Int!
  height_m: Int!
  hp: Int!
  id: Int!
  is_legendary: Int!
  japanese_name: Int!
  name: Int!
  percentage_male: Int!
  sp_attack: Int!
  sp_defense: Int!
  speed: Int!
  status: Int!
  weight_kg: Int!
}

input PokemonCountOrderByAggregateInput {
  against_bug: SortOrder
  against_dark: SortOrder
  against_dragon: SortOrder
  against_electric: SortOrder
  against_fairy: SortOrder
  against_fight: SortOrder
  against_fire: SortOrder
  against_flying: SortOrder
  against_ghost: SortOrder
  against_grass: SortOrder
  against_ground: SortOrder
  against_ice: SortOrder
  against_normal: SortOrder
  against_poison: SortOrder
  against_psychic: SortOrder
  against_rock: SortOrder
  against_steel: SortOrder
  against_water: SortOrder
  attack: SortOrder
  base_egg_steps: SortOrder
  base_happiness: SortOrder
  base_total: SortOrder
  capture_rate: SortOrder
  classificationId: SortOrder
  defense: SortOrder
  experience_growth: SortOrder
  generationId: SortOrder
  height_m: SortOrder
  hp: SortOrder
  id: SortOrder
  is_legendary: SortOrder
  japanese_name: SortOrder
  name: SortOrder
  percentage_male: SortOrder
  sp_attack: SortOrder
  sp_defense: SortOrder
  speed: SortOrder
  status: SortOrder
  weight_kg: SortOrder
}

input PokemonCreateInput {
  Captured: CapturedCreateNestedManyWithoutPokemonInput
  abilities: PokemonAbilitiesCreateNestedManyWithoutPokemonInput
  against_bug: Float!
  against_dark: Float!
  against_dragon: Float!
  against_electric: Float!
  against_fairy: Float!
  against_fight: Float!
  against_fire: Float
  against_flying: Float!
  against_ghost: Float!
  against_grass: Float
  against_ground: Float!
  against_ice: Float!
  against_normal: Float
  against_poison: Float!
  against_psychic: Float!
  against_rock: Float!
  against_steel: Float!
  against_water: Float
  attack: Int!
  base_egg_steps: Int!
  base_happiness: Int!
  base_total: Int!
  capture_rate: Float
  classification: ClassificationCreateNestedOneWithoutPokemonInput!
  defense: Int!
  experience_growth: Int!
  generation: GenerationCreateNestedOneWithoutPokemonInput!
  height_m: Float!
  hp: Int!
  is_legendary: Boolean!
  japanese_name: String!
  name: String!
  percentage_male: Float!
  pokedex_number: PokedexCreateNestedOneWithoutPokemonInput
  sp_attack: Int!
  sp_defense: Int!
  speed: Int!
  status: Status
  types: PokemonTypesCreateNestedManyWithoutPokemonInput
  weight_kg: Float!
}

input PokemonCreateManyClassificationInput {
  against_bug: Float!
  against_dark: Float!
  against_dragon: Float!
  against_electric: Float!
  against_fairy: Float!
  against_fight: Float!
  against_fire: Float
  against_flying: Float!
  against_ghost: Float!
  against_grass: Float
  against_ground: Float!
  against_ice: Float!
  against_normal: Float
  against_poison: Float!
  against_psychic: Float!
  against_rock: Float!
  against_steel: Float!
  against_water: Float
  attack: Int!
  base_egg_steps: Int!
  base_happiness: Int!
  base_total: Int!
  capture_rate: Float
  defense: Int!
  experience_growth: Int!
  generationId: Int!
  height_m: Float!
  hp: Int!
  id: Int
  is_legendary: Boolean!
  japanese_name: String!
  name: String!
  percentage_male: Float!
  sp_attack: Int!
  sp_defense: Int!
  speed: Int!
  status: Status
  weight_kg: Float!
}

input PokemonCreateManyClassificationInputEnvelope {
  data: [PokemonCreateManyClassificationInput!]!
  skipDuplicates: Boolean
}

input PokemonCreateManyGenerationInput {
  against_bug: Float!
  against_dark: Float!
  against_dragon: Float!
  against_electric: Float!
  against_fairy: Float!
  against_fight: Float!
  against_fire: Float
  against_flying: Float!
  against_ghost: Float!
  against_grass: Float
  against_ground: Float!
  against_ice: Float!
  against_normal: Float
  against_poison: Float!
  against_psychic: Float!
  against_rock: Float!
  against_steel: Float!
  against_water: Float
  attack: Int!
  base_egg_steps: Int!
  base_happiness: Int!
  base_total: Int!
  capture_rate: Float
  classificationId: Int!
  defense: Int!
  experience_growth: Int!
  height_m: Float!
  hp: Int!
  id: Int
  is_legendary: Boolean!
  japanese_name: String!
  name: String!
  percentage_male: Float!
  sp_attack: Int!
  sp_defense: Int!
  speed: Int!
  status: Status
  weight_kg: Float!
}

input PokemonCreateManyGenerationInputEnvelope {
  data: [PokemonCreateManyGenerationInput!]!
  skipDuplicates: Boolean
}

input PokemonCreateManyInput {
  against_bug: Float!
  against_dark: Float!
  against_dragon: Float!
  against_electric: Float!
  against_fairy: Float!
  against_fight: Float!
  against_fire: Float
  against_flying: Float!
  against_ghost: Float!
  against_grass: Float
  against_ground: Float!
  against_ice: Float!
  against_normal: Float
  against_poison: Float!
  against_psychic: Float!
  against_rock: Float!
  against_steel: Float!
  against_water: Float
  attack: Int!
  base_egg_steps: Int!
  base_happiness: Int!
  base_total: Int!
  capture_rate: Float
  classificationId: Int!
  defense: Int!
  experience_growth: Int!
  generationId: Int!
  height_m: Float!
  hp: Int!
  id: Int
  is_legendary: Boolean!
  japanese_name: String!
  name: String!
  percentage_male: Float!
  sp_attack: Int!
  sp_defense: Int!
  speed: Int!
  status: Status
  weight_kg: Float!
}

input PokemonCreateNestedManyWithoutClassificationInput {
  connect: [PokemonWhereUniqueInput!]
  connectOrCreate: [PokemonCreateOrConnectWithoutClassificationInput!]
  create: [PokemonCreateWithoutClassificationInput!]
  createMany: PokemonCreateManyClassificationInputEnvelope
}

input PokemonCreateNestedManyWithoutGenerationInput {
  connect: [PokemonWhereUniqueInput!]
  connectOrCreate: [PokemonCreateOrConnectWithoutGenerationInput!]
  create: [PokemonCreateWithoutGenerationInput!]
  createMany: PokemonCreateManyGenerationInputEnvelope
}

input PokemonCreateNestedOneWithoutAbilitiesInput {
  connect: PokemonWhereUniqueInput
  connectOrCreate: PokemonCreateOrConnectWithoutAbilitiesInput
  create: PokemonCreateWithoutAbilitiesInput
}

input PokemonCreateNestedOneWithoutCapturedInput {
  connect: PokemonWhereUniqueInput
  connectOrCreate: PokemonCreateOrConnectWithoutCapturedInput
  create: PokemonCreateWithoutCapturedInput
}

input PokemonCreateNestedOneWithoutPokedex_numberInput {
  connect: PokemonWhereUniqueInput
  connectOrCreate: PokemonCreateOrConnectWithoutPokedex_numberInput
  create: PokemonCreateWithoutPokedex_numberInput
}

input PokemonCreateNestedOneWithoutTypesInput {
  connect: PokemonWhereUniqueInput
  connectOrCreate: PokemonCreateOrConnectWithoutTypesInput
  create: PokemonCreateWithoutTypesInput
}

input PokemonCreateOrConnectWithoutAbilitiesInput {
  create: PokemonCreateWithoutAbilitiesInput!
  where: PokemonWhereUniqueInput!
}

input PokemonCreateOrConnectWithoutCapturedInput {
  create: PokemonCreateWithoutCapturedInput!
  where: PokemonWhereUniqueInput!
}

input PokemonCreateOrConnectWithoutClassificationInput {
  create: PokemonCreateWithoutClassificationInput!
  where: PokemonWhereUniqueInput!
}

input PokemonCreateOrConnectWithoutGenerationInput {
  create: PokemonCreateWithoutGenerationInput!
  where: PokemonWhereUniqueInput!
}

input PokemonCreateOrConnectWithoutPokedex_numberInput {
  create: PokemonCreateWithoutPokedex_numberInput!
  where: PokemonWhereUniqueInput!
}

input PokemonCreateOrConnectWithoutTypesInput {
  create: PokemonCreateWithoutTypesInput!
  where: PokemonWhereUniqueInput!
}

input PokemonCreateWithoutAbilitiesInput {
  Captured: CapturedCreateNestedManyWithoutPokemonInput
  against_bug: Float!
  against_dark: Float!
  against_dragon: Float!
  against_electric: Float!
  against_fairy: Float!
  against_fight: Float!
  against_fire: Float
  against_flying: Float!
  against_ghost: Float!
  against_grass: Float
  against_ground: Float!
  against_ice: Float!
  against_normal: Float
  against_poison: Float!
  against_psychic: Float!
  against_rock: Float!
  against_steel: Float!
  against_water: Float
  attack: Int!
  base_egg_steps: Int!
  base_happiness: Int!
  base_total: Int!
  capture_rate: Float
  classification: ClassificationCreateNestedOneWithoutPokemonInput!
  defense: Int!
  experience_growth: Int!
  generation: GenerationCreateNestedOneWithoutPokemonInput!
  height_m: Float!
  hp: Int!
  is_legendary: Boolean!
  japanese_name: String!
  name: String!
  percentage_male: Float!
  pokedex_number: PokedexCreateNestedOneWithoutPokemonInput
  sp_attack: Int!
  sp_defense: Int!
  speed: Int!
  status: Status
  types: PokemonTypesCreateNestedManyWithoutPokemonInput
  weight_kg: Float!
}

input PokemonCreateWithoutCapturedInput {
  abilities: PokemonAbilitiesCreateNestedManyWithoutPokemonInput
  against_bug: Float!
  against_dark: Float!
  against_dragon: Float!
  against_electric: Float!
  against_fairy: Float!
  against_fight: Float!
  against_fire: Float
  against_flying: Float!
  against_ghost: Float!
  against_grass: Float
  against_ground: Float!
  against_ice: Float!
  against_normal: Float
  against_poison: Float!
  against_psychic: Float!
  against_rock: Float!
  against_steel: Float!
  against_water: Float
  attack: Int!
  base_egg_steps: Int!
  base_happiness: Int!
  base_total: Int!
  capture_rate: Float
  classification: ClassificationCreateNestedOneWithoutPokemonInput!
  defense: Int!
  experience_growth: Int!
  generation: GenerationCreateNestedOneWithoutPokemonInput!
  height_m: Float!
  hp: Int!
  is_legendary: Boolean!
  japanese_name: String!
  name: String!
  percentage_male: Float!
  pokedex_number: PokedexCreateNestedOneWithoutPokemonInput
  sp_attack: Int!
  sp_defense: Int!
  speed: Int!
  status: Status
  types: PokemonTypesCreateNestedManyWithoutPokemonInput
  weight_kg: Float!
}

input PokemonCreateWithoutClassificationInput {
  Captured: CapturedCreateNestedManyWithoutPokemonInput
  abilities: PokemonAbilitiesCreateNestedManyWithoutPokemonInput
  against_bug: Float!
  against_dark: Float!
  against_dragon: Float!
  against_electric: Float!
  against_fairy: Float!
  against_fight: Float!
  against_fire: Float
  against_flying: Float!
  against_ghost: Float!
  against_grass: Float
  against_ground: Float!
  against_ice: Float!
  against_normal: Float
  against_poison: Float!
  against_psychic: Float!
  against_rock: Float!
  against_steel: Float!
  against_water: Float
  attack: Int!
  base_egg_steps: Int!
  base_happiness: Int!
  base_total: Int!
  capture_rate: Float
  defense: Int!
  experience_growth: Int!
  generation: GenerationCreateNestedOneWithoutPokemonInput!
  height_m: Float!
  hp: Int!
  is_legendary: Boolean!
  japanese_name: String!
  name: String!
  percentage_male: Float!
  pokedex_number: PokedexCreateNestedOneWithoutPokemonInput
  sp_attack: Int!
  sp_defense: Int!
  speed: Int!
  status: Status
  types: PokemonTypesCreateNestedManyWithoutPokemonInput
  weight_kg: Float!
}

input PokemonCreateWithoutGenerationInput {
  Captured: CapturedCreateNestedManyWithoutPokemonInput
  abilities: PokemonAbilitiesCreateNestedManyWithoutPokemonInput
  against_bug: Float!
  against_dark: Float!
  against_dragon: Float!
  against_electric: Float!
  against_fairy: Float!
  against_fight: Float!
  against_fire: Float
  against_flying: Float!
  against_ghost: Float!
  against_grass: Float
  against_ground: Float!
  against_ice: Float!
  against_normal: Float
  against_poison: Float!
  against_psychic: Float!
  against_rock: Float!
  against_steel: Float!
  against_water: Float
  attack: Int!
  base_egg_steps: Int!
  base_happiness: Int!
  base_total: Int!
  capture_rate: Float
  classification: ClassificationCreateNestedOneWithoutPokemonInput!
  defense: Int!
  experience_growth: Int!
  height_m: Float!
  hp: Int!
  is_legendary: Boolean!
  japanese_name: String!
  name: String!
  percentage_male: Float!
  pokedex_number: PokedexCreateNestedOneWithoutPokemonInput
  sp_attack: Int!
  sp_defense: Int!
  speed: Int!
  status: Status
  types: PokemonTypesCreateNestedManyWithoutPokemonInput
  weight_kg: Float!
}

input PokemonCreateWithoutPokedex_numberInput {
  Captured: CapturedCreateNestedManyWithoutPokemonInput
  abilities: PokemonAbilitiesCreateNestedManyWithoutPokemonInput
  against_bug: Float!
  against_dark: Float!
  against_dragon: Float!
  against_electric: Float!
  against_fairy: Float!
  against_fight: Float!
  against_fire: Float
  against_flying: Float!
  against_ghost: Float!
  against_grass: Float
  against_ground: Float!
  against_ice: Float!
  against_normal: Float
  against_poison: Float!
  against_psychic: Float!
  against_rock: Float!
  against_steel: Float!
  against_water: Float
  attack: Int!
  base_egg_steps: Int!
  base_happiness: Int!
  base_total: Int!
  capture_rate: Float
  classification: ClassificationCreateNestedOneWithoutPokemonInput!
  defense: Int!
  experience_growth: Int!
  generation: GenerationCreateNestedOneWithoutPokemonInput!
  height_m: Float!
  hp: Int!
  is_legendary: Boolean!
  japanese_name: String!
  name: String!
  percentage_male: Float!
  sp_attack: Int!
  sp_defense: Int!
  speed: Int!
  status: Status
  types: PokemonTypesCreateNestedManyWithoutPokemonInput
  weight_kg: Float!
}

input PokemonCreateWithoutTypesInput {
  Captured: CapturedCreateNestedManyWithoutPokemonInput
  abilities: PokemonAbilitiesCreateNestedManyWithoutPokemonInput
  against_bug: Float!
  against_dark: Float!
  against_dragon: Float!
  against_electric: Float!
  against_fairy: Float!
  against_fight: Float!
  against_fire: Float
  against_flying: Float!
  against_ghost: Float!
  against_grass: Float
  against_ground: Float!
  against_ice: Float!
  against_normal: Float
  against_poison: Float!
  against_psychic: Float!
  against_rock: Float!
  against_steel: Float!
  against_water: Float
  attack: Int!
  base_egg_steps: Int!
  base_happiness: Int!
  base_total: Int!
  capture_rate: Float
  classification: ClassificationCreateNestedOneWithoutPokemonInput!
  defense: Int!
  experience_growth: Int!
  generation: GenerationCreateNestedOneWithoutPokemonInput!
  height_m: Float!
  hp: Int!
  is_legendary: Boolean!
  japanese_name: String!
  name: String!
  percentage_male: Float!
  pokedex_number: PokedexCreateNestedOneWithoutPokemonInput
  sp_attack: Int!
  sp_defense: Int!
  speed: Int!
  status: Status
  weight_kg: Float!
}

type PokemonGroupBy {
  _avg: PokemonAvgAggregate
  _count: PokemonCountAggregate
  _max: PokemonMaxAggregate
  _min: PokemonMinAggregate
  _sum: PokemonSumAggregate
  against_bug: Float!
  against_dark: Float!
  against_dragon: Float!
  against_electric: Float!
  against_fairy: Float!
  against_fight: Float!
  against_fire: Float
  against_flying: Float!
  against_ghost: Float!
  against_grass: Float
  against_ground: Float!
  against_ice: Float!
  against_normal: Float
  against_poison: Float!
  against_psychic: Float!
  against_rock: Float!
  against_steel: Float!
  against_water: Float
  attack: Int!
  base_egg_steps: Int!
  base_happiness: Int!
  base_total: Int!
  capture_rate: Float
  classificationId: Int!
  defense: Int!
  experience_growth: Int!
  generationId: Int!
  height_m: Float!
  hp: Int!
  id: Int!
  is_legendary: Boolean!
  japanese_name: String!
  name: String!
  percentage_male: Float!
  sp_attack: Int!
  sp_defense: Int!
  speed: Int!
  status: Status!
  weight_kg: Float!
}

input PokemonListRelationFilter {
  every: PokemonWhereInput
  none: PokemonWhereInput
  some: PokemonWhereInput
}

type PokemonMaxAggregate {
  against_bug: Float
  against_dark: Float
  against_dragon: Float
  against_electric: Float
  against_fairy: Float
  against_fight: Float
  against_fire: Float
  against_flying: Float
  against_ghost: Float
  against_grass: Float
  against_ground: Float
  against_ice: Float
  against_normal: Float
  against_poison: Float
  against_psychic: Float
  against_rock: Float
  against_steel: Float
  against_water: Float
  attack: Int
  base_egg_steps: Int
  base_happiness: Int
  base_total: Int
  capture_rate: Float
  classificationId: Int
  defense: Int
  experience_growth: Int
  generationId: Int
  height_m: Float
  hp: Int
  id: Int
  is_legendary: Boolean
  japanese_name: String
  name: String
  percentage_male: Float
  sp_attack: Int
  sp_defense: Int
  speed: Int
  status: Status
  weight_kg: Float
}

input PokemonMaxOrderByAggregateInput {
  against_bug: SortOrder
  against_dark: SortOrder
  against_dragon: SortOrder
  against_electric: SortOrder
  against_fairy: SortOrder
  against_fight: SortOrder
  against_fire: SortOrder
  against_flying: SortOrder
  against_ghost: SortOrder
  against_grass: SortOrder
  against_ground: SortOrder
  against_ice: SortOrder
  against_normal: SortOrder
  against_poison: SortOrder
  against_psychic: SortOrder
  against_rock: SortOrder
  against_steel: SortOrder
  against_water: SortOrder
  attack: SortOrder
  base_egg_steps: SortOrder
  base_happiness: SortOrder
  base_total: SortOrder
  capture_rate: SortOrder
  classificationId: SortOrder
  defense: SortOrder
  experience_growth: SortOrder
  generationId: SortOrder
  height_m: SortOrder
  hp: SortOrder
  id: SortOrder
  is_legendary: SortOrder
  japanese_name: SortOrder
  name: SortOrder
  percentage_male: SortOrder
  sp_attack: SortOrder
  sp_defense: SortOrder
  speed: SortOrder
  status: SortOrder
  weight_kg: SortOrder
}

type PokemonMinAggregate {
  against_bug: Float
  against_dark: Float
  against_dragon: Float
  against_electric: Float
  against_fairy: Float
  against_fight: Float
  against_fire: Float
  against_flying: Float
  against_ghost: Float
  against_grass: Float
  against_ground: Float
  against_ice: Float
  against_normal: Float
  against_poison: Float
  against_psychic: Float
  against_rock: Float
  against_steel: Float
  against_water: Float
  attack: Int
  base_egg_steps: Int
  base_happiness: Int
  base_total: Int
  capture_rate: Float
  classificationId: Int
  defense: Int
  experience_growth: Int
  generationId: Int
  height_m: Float
  hp: Int
  id: Int
  is_legendary: Boolean
  japanese_name: String
  name: String
  percentage_male: Float
  sp_attack: Int
  sp_defense: Int
  speed: Int
  status: Status
  weight_kg: Float
}

input PokemonMinOrderByAggregateInput {
  against_bug: SortOrder
  against_dark: SortOrder
  against_dragon: SortOrder
  against_electric: SortOrder
  against_fairy: SortOrder
  against_fight: SortOrder
  against_fire: SortOrder
  against_flying: SortOrder
  against_ghost: SortOrder
  against_grass: SortOrder
  against_ground: SortOrder
  against_ice: SortOrder
  against_normal: SortOrder
  against_poison: SortOrder
  against_psychic: SortOrder
  against_rock: SortOrder
  against_steel: SortOrder
  against_water: SortOrder
  attack: SortOrder
  base_egg_steps: SortOrder
  base_happiness: SortOrder
  base_total: SortOrder
  capture_rate: SortOrder
  classificationId: SortOrder
  defense: SortOrder
  experience_growth: SortOrder
  generationId: SortOrder
  height_m: SortOrder
  hp: SortOrder
  id: SortOrder
  is_legendary: SortOrder
  japanese_name: SortOrder
  name: SortOrder
  percentage_male: SortOrder
  sp_attack: SortOrder
  sp_defense: SortOrder
  speed: SortOrder
  status: SortOrder
  weight_kg: SortOrder
}

input PokemonOrderByRelationAggregateInput {
  _count: SortOrder
}

input PokemonOrderByWithAggregationInput {
  _avg: PokemonAvgOrderByAggregateInput
  _count: PokemonCountOrderByAggregateInput
  _max: PokemonMaxOrderByAggregateInput
  _min: PokemonMinOrderByAggregateInput
  _sum: PokemonSumOrderByAggregateInput
  against_bug: SortOrder
  against_dark: SortOrder
  against_dragon: SortOrder
  against_electric: SortOrder
  against_fairy: SortOrder
  against_fight: SortOrder
  against_fire: SortOrder
  against_flying: SortOrder
  against_ghost: SortOrder
  against_grass: SortOrder
  against_ground: SortOrder
  against_ice: SortOrder
  against_normal: SortOrder
  against_poison: SortOrder
  against_psychic: SortOrder
  against_rock: SortOrder
  against_steel: SortOrder
  against_water: SortOrder
  attack: SortOrder
  base_egg_steps: SortOrder
  base_happiness: SortOrder
  base_total: SortOrder
  capture_rate: SortOrder
  classificationId: SortOrder
  defense: SortOrder
  experience_growth: SortOrder
  generationId: SortOrder
  height_m: SortOrder
  hp: SortOrder
  id: SortOrder
  is_legendary: SortOrder
  japanese_name: SortOrder
  name: SortOrder
  percentage_male: SortOrder
  sp_attack: SortOrder
  sp_defense: SortOrder
  speed: SortOrder
  status: SortOrder
  weight_kg: SortOrder
}

input PokemonOrderByWithRelationInput {
  Captured: CapturedOrderByRelationAggregateInput
  abilities: PokemonAbilitiesOrderByRelationAggregateInput
  against_bug: SortOrder
  against_dark: SortOrder
  against_dragon: SortOrder
  against_electric: SortOrder
  against_fairy: SortOrder
  against_fight: SortOrder
  against_fire: SortOrder
  against_flying: SortOrder
  against_ghost: SortOrder
  against_grass: SortOrder
  against_ground: SortOrder
  against_ice: SortOrder
  against_normal: SortOrder
  against_poison: SortOrder
  against_psychic: SortOrder
  against_rock: SortOrder
  against_steel: SortOrder
  against_water: SortOrder
  attack: SortOrder
  base_egg_steps: SortOrder
  base_happiness: SortOrder
  base_total: SortOrder
  capture_rate: SortOrder
  classification: ClassificationOrderByWithRelationInput
  classificationId: SortOrder
  defense: SortOrder
  experience_growth: SortOrder
  generation: GenerationOrderByWithRelationInput
  generationId: SortOrder
  height_m: SortOrder
  hp: SortOrder
  id: SortOrder
  is_legendary: SortOrder
  japanese_name: SortOrder
  name: SortOrder
  percentage_male: SortOrder
  pokedex_number: PokedexOrderByWithRelationInput
  sp_attack: SortOrder
  sp_defense: SortOrder
  speed: SortOrder
  status: SortOrder
  types: PokemonTypesOrderByRelationAggregateInput
  weight_kg: SortOrder
}

input PokemonRelationFilter {
  is: PokemonWhereInput
  isNot: PokemonWhereInput
}

enum PokemonScalarFieldEnum {
  against_bug
  against_dark
  against_dragon
  against_electric
  against_fairy
  against_fight
  against_fire
  against_flying
  against_ghost
  against_grass
  against_ground
  against_ice
  against_normal
  against_poison
  against_psychic
  against_rock
  against_steel
  against_water
  attack
  base_egg_steps
  base_happiness
  base_total
  capture_rate
  classificationId
  defense
  experience_growth
  generationId
  height_m
  hp
  id
  is_legendary
  japanese_name
  name
  percentage_male
  sp_attack
  sp_defense
  speed
  status
  weight_kg
}

input PokemonScalarWhereInput {
  AND: [PokemonScalarWhereInput!]
  NOT: [PokemonScalarWhereInput!]
  OR: [PokemonScalarWhereInput!]
  against_bug: FloatFilter
  against_dark: FloatFilter
  against_dragon: FloatFilter
  against_electric: FloatFilter
  against_fairy: FloatFilter
  against_fight: FloatFilter
  against_fire: FloatNullableFilter
  against_flying: FloatFilter
  against_ghost: FloatFilter
  against_grass: FloatNullableFilter
  against_ground: FloatFilter
  against_ice: FloatFilter
  against_normal: FloatNullableFilter
  against_poison: FloatFilter
  against_psychic: FloatFilter
  against_rock: FloatFilter
  against_steel: FloatFilter
  against_water: FloatNullableFilter
  attack: IntFilter
  base_egg_steps: IntFilter
  base_happiness: IntFilter
  base_total: IntFilter
  capture_rate: FloatNullableFilter
  classificationId: IntFilter
  defense: IntFilter
  experience_growth: IntFilter
  generationId: IntFilter
  height_m: FloatFilter
  hp: IntFilter
  id: IntFilter
  is_legendary: BoolFilter
  japanese_name: StringFilter
  name: StringFilter
  percentage_male: FloatFilter
  sp_attack: IntFilter
  sp_defense: IntFilter
  speed: IntFilter
  status: EnumStatusFilter
  weight_kg: FloatFilter
}

input PokemonScalarWhereWithAggregatesInput {
  AND: [PokemonScalarWhereWithAggregatesInput!]
  NOT: [PokemonScalarWhereWithAggregatesInput!]
  OR: [PokemonScalarWhereWithAggregatesInput!]
  against_bug: FloatWithAggregatesFilter
  against_dark: FloatWithAggregatesFilter
  against_dragon: FloatWithAggregatesFilter
  against_electric: FloatWithAggregatesFilter
  against_fairy: FloatWithAggregatesFilter
  against_fight: FloatWithAggregatesFilter
  against_fire: FloatNullableWithAggregatesFilter
  against_flying: FloatWithAggregatesFilter
  against_ghost: FloatWithAggregatesFilter
  against_grass: FloatNullableWithAggregatesFilter
  against_ground: FloatWithAggregatesFilter
  against_ice: FloatWithAggregatesFilter
  against_normal: FloatNullableWithAggregatesFilter
  against_poison: FloatWithAggregatesFilter
  against_psychic: FloatWithAggregatesFilter
  against_rock: FloatWithAggregatesFilter
  against_steel: FloatWithAggregatesFilter
  against_water: FloatNullableWithAggregatesFilter
  attack: IntWithAggregatesFilter
  base_egg_steps: IntWithAggregatesFilter
  base_happiness: IntWithAggregatesFilter
  base_total: IntWithAggregatesFilter
  capture_rate: FloatNullableWithAggregatesFilter
  classificationId: IntWithAggregatesFilter
  defense: IntWithAggregatesFilter
  experience_growth: IntWithAggregatesFilter
  generationId: IntWithAggregatesFilter
  height_m: FloatWithAggregatesFilter
  hp: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  is_legendary: BoolWithAggregatesFilter
  japanese_name: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  percentage_male: FloatWithAggregatesFilter
  sp_attack: IntWithAggregatesFilter
  sp_defense: IntWithAggregatesFilter
  speed: IntWithAggregatesFilter
  status: EnumStatusWithAggregatesFilter
  weight_kg: FloatWithAggregatesFilter
}

type PokemonSumAggregate {
  against_bug: Float
  against_dark: Float
  against_dragon: Float
  against_electric: Float
  against_fairy: Float
  against_fight: Float
  against_fire: Float
  against_flying: Float
  against_ghost: Float
  against_grass: Float
  against_ground: Float
  against_ice: Float
  against_normal: Float
  against_poison: Float
  against_psychic: Float
  against_rock: Float
  against_steel: Float
  against_water: Float
  attack: Int
  base_egg_steps: Int
  base_happiness: Int
  base_total: Int
  capture_rate: Float
  classificationId: Int
  defense: Int
  experience_growth: Int
  generationId: Int
  height_m: Float
  hp: Int
  id: Int
  percentage_male: Float
  sp_attack: Int
  sp_defense: Int
  speed: Int
  weight_kg: Float
}

input PokemonSumOrderByAggregateInput {
  against_bug: SortOrder
  against_dark: SortOrder
  against_dragon: SortOrder
  against_electric: SortOrder
  against_fairy: SortOrder
  against_fight: SortOrder
  against_fire: SortOrder
  against_flying: SortOrder
  against_ghost: SortOrder
  against_grass: SortOrder
  against_ground: SortOrder
  against_ice: SortOrder
  against_normal: SortOrder
  against_poison: SortOrder
  against_psychic: SortOrder
  against_rock: SortOrder
  against_steel: SortOrder
  against_water: SortOrder
  attack: SortOrder
  base_egg_steps: SortOrder
  base_happiness: SortOrder
  base_total: SortOrder
  capture_rate: SortOrder
  classificationId: SortOrder
  defense: SortOrder
  experience_growth: SortOrder
  generationId: SortOrder
  height_m: SortOrder
  hp: SortOrder
  id: SortOrder
  percentage_male: SortOrder
  sp_attack: SortOrder
  sp_defense: SortOrder
  speed: SortOrder
  weight_kg: SortOrder
}

type PokemonTypes {
  createdAt: DateTime!
  expiresAt: DateTime
  pokemon: Pokemon!
  pokemonId: Int!
  type: Type!
  typeId: Int!
  updatedAt: DateTime!
}

type PokemonTypesAvgAggregate {
  pokemonId: Float
  typeId: Float
}

input PokemonTypesAvgOrderByAggregateInput {
  pokemonId: SortOrder
  typeId: SortOrder
}

type PokemonTypesCountAggregate {
  _all: Int!
  createdAt: Int!
  expiresAt: Int!
  pokemonId: Int!
  typeId: Int!
  updatedAt: Int!
}

input PokemonTypesCountOrderByAggregateInput {
  createdAt: SortOrder
  expiresAt: SortOrder
  pokemonId: SortOrder
  typeId: SortOrder
  updatedAt: SortOrder
}

input PokemonTypesCreateInput {
  createdAt: DateTime
  expiresAt: DateTime
  pokemon: PokemonCreateNestedOneWithoutTypesInput
  type: TypeCreateNestedOneWithoutPokemonTypesInput
  updatedAt: DateTime
}

input PokemonTypesCreateManyInput {
  createdAt: DateTime
  expiresAt: DateTime
  pokemonId: Int
  typeId: Int
  updatedAt: DateTime
}

input PokemonTypesCreateManyPokemonInput {
  createdAt: DateTime
  expiresAt: DateTime
  typeId: Int
  updatedAt: DateTime
}

input PokemonTypesCreateManyPokemonInputEnvelope {
  data: [PokemonTypesCreateManyPokemonInput!]!
  skipDuplicates: Boolean
}

input PokemonTypesCreateManyTypeInput {
  createdAt: DateTime
  expiresAt: DateTime
  pokemonId: Int
  updatedAt: DateTime
}

input PokemonTypesCreateManyTypeInputEnvelope {
  data: [PokemonTypesCreateManyTypeInput!]!
  skipDuplicates: Boolean
}

input PokemonTypesCreateNestedManyWithoutPokemonInput {
  connect: [PokemonTypesWhereUniqueInput!]
  connectOrCreate: [PokemonTypesCreateOrConnectWithoutPokemonInput!]
  create: [PokemonTypesCreateWithoutPokemonInput!]
  createMany: PokemonTypesCreateManyPokemonInputEnvelope
}

input PokemonTypesCreateNestedManyWithoutTypeInput {
  connect: [PokemonTypesWhereUniqueInput!]
  connectOrCreate: [PokemonTypesCreateOrConnectWithoutTypeInput!]
  create: [PokemonTypesCreateWithoutTypeInput!]
  createMany: PokemonTypesCreateManyTypeInputEnvelope
}

input PokemonTypesCreateOrConnectWithoutPokemonInput {
  create: PokemonTypesCreateWithoutPokemonInput!
  where: PokemonTypesWhereUniqueInput!
}

input PokemonTypesCreateOrConnectWithoutTypeInput {
  create: PokemonTypesCreateWithoutTypeInput!
  where: PokemonTypesWhereUniqueInput!
}

input PokemonTypesCreateWithoutPokemonInput {
  createdAt: DateTime
  expiresAt: DateTime
  type: TypeCreateNestedOneWithoutPokemonTypesInput
  updatedAt: DateTime
}

input PokemonTypesCreateWithoutTypeInput {
  createdAt: DateTime
  expiresAt: DateTime
  pokemon: PokemonCreateNestedOneWithoutTypesInput
  updatedAt: DateTime
}

type PokemonTypesGroupBy {
  _avg: PokemonTypesAvgAggregate
  _count: PokemonTypesCountAggregate
  _max: PokemonTypesMaxAggregate
  _min: PokemonTypesMinAggregate
  _sum: PokemonTypesSumAggregate
  createdAt: DateTime!
  expiresAt: DateTime
  pokemonId: Int!
  typeId: Int!
  updatedAt: DateTime!
}

input PokemonTypesListRelationFilter {
  every: PokemonTypesWhereInput
  none: PokemonTypesWhereInput
  some: PokemonTypesWhereInput
}

type PokemonTypesMaxAggregate {
  createdAt: DateTime
  expiresAt: DateTime
  pokemonId: Int
  typeId: Int
  updatedAt: DateTime
}

input PokemonTypesMaxOrderByAggregateInput {
  createdAt: SortOrder
  expiresAt: SortOrder
  pokemonId: SortOrder
  typeId: SortOrder
  updatedAt: SortOrder
}

type PokemonTypesMinAggregate {
  createdAt: DateTime
  expiresAt: DateTime
  pokemonId: Int
  typeId: Int
  updatedAt: DateTime
}

input PokemonTypesMinOrderByAggregateInput {
  createdAt: SortOrder
  expiresAt: SortOrder
  pokemonId: SortOrder
  typeId: SortOrder
  updatedAt: SortOrder
}

input PokemonTypesOrderByRelationAggregateInput {
  _count: SortOrder
}

input PokemonTypesOrderByWithAggregationInput {
  _avg: PokemonTypesAvgOrderByAggregateInput
  _count: PokemonTypesCountOrderByAggregateInput
  _max: PokemonTypesMaxOrderByAggregateInput
  _min: PokemonTypesMinOrderByAggregateInput
  _sum: PokemonTypesSumOrderByAggregateInput
  createdAt: SortOrder
  expiresAt: SortOrder
  pokemonId: SortOrder
  typeId: SortOrder
  updatedAt: SortOrder
}

input PokemonTypesOrderByWithRelationInput {
  createdAt: SortOrder
  expiresAt: SortOrder
  pokemon: PokemonOrderByWithRelationInput
  pokemonId: SortOrder
  type: TypeOrderByWithRelationInput
  typeId: SortOrder
  updatedAt: SortOrder
}

input PokemonTypesPokemonIdTypeIdCompoundUniqueInput {
  pokemonId: Int!
  typeId: Int!
}

enum PokemonTypesScalarFieldEnum {
  createdAt
  expiresAt
  pokemonId
  typeId
  updatedAt
}

input PokemonTypesScalarWhereInput {
  AND: [PokemonTypesScalarWhereInput!]
  NOT: [PokemonTypesScalarWhereInput!]
  OR: [PokemonTypesScalarWhereInput!]
  createdAt: DateTimeFilter
  expiresAt: DateTimeNullableFilter
  pokemonId: IntFilter
  typeId: IntFilter
  updatedAt: DateTimeFilter
}

input PokemonTypesScalarWhereWithAggregatesInput {
  AND: [PokemonTypesScalarWhereWithAggregatesInput!]
  NOT: [PokemonTypesScalarWhereWithAggregatesInput!]
  OR: [PokemonTypesScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  expiresAt: DateTimeNullableWithAggregatesFilter
  pokemonId: IntWithAggregatesFilter
  typeId: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type PokemonTypesSumAggregate {
  pokemonId: Int
  typeId: Int
}

input PokemonTypesSumOrderByAggregateInput {
  pokemonId: SortOrder
  typeId: SortOrder
}

input PokemonTypesUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: NullableDateTimeFieldUpdateOperationsInput
  pokemon: PokemonUpdateOneRequiredWithoutTypesInput
  type: TypeUpdateOneRequiredWithoutPokemonTypesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PokemonTypesUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PokemonTypesUpdateManyWithWhereWithoutPokemonInput {
  data: PokemonTypesUpdateManyMutationInput!
  where: PokemonTypesScalarWhereInput!
}

input PokemonTypesUpdateManyWithWhereWithoutTypeInput {
  data: PokemonTypesUpdateManyMutationInput!
  where: PokemonTypesScalarWhereInput!
}

input PokemonTypesUpdateManyWithoutPokemonInput {
  connect: [PokemonTypesWhereUniqueInput!]
  connectOrCreate: [PokemonTypesCreateOrConnectWithoutPokemonInput!]
  create: [PokemonTypesCreateWithoutPokemonInput!]
  createMany: PokemonTypesCreateManyPokemonInputEnvelope
  delete: [PokemonTypesWhereUniqueInput!]
  deleteMany: [PokemonTypesScalarWhereInput!]
  disconnect: [PokemonTypesWhereUniqueInput!]
  set: [PokemonTypesWhereUniqueInput!]
  update: [PokemonTypesUpdateWithWhereUniqueWithoutPokemonInput!]
  updateMany: [PokemonTypesUpdateManyWithWhereWithoutPokemonInput!]
  upsert: [PokemonTypesUpsertWithWhereUniqueWithoutPokemonInput!]
}

input PokemonTypesUpdateManyWithoutTypeInput {
  connect: [PokemonTypesWhereUniqueInput!]
  connectOrCreate: [PokemonTypesCreateOrConnectWithoutTypeInput!]
  create: [PokemonTypesCreateWithoutTypeInput!]
  createMany: PokemonTypesCreateManyTypeInputEnvelope
  delete: [PokemonTypesWhereUniqueInput!]
  deleteMany: [PokemonTypesScalarWhereInput!]
  disconnect: [PokemonTypesWhereUniqueInput!]
  set: [PokemonTypesWhereUniqueInput!]
  update: [PokemonTypesUpdateWithWhereUniqueWithoutTypeInput!]
  updateMany: [PokemonTypesUpdateManyWithWhereWithoutTypeInput!]
  upsert: [PokemonTypesUpsertWithWhereUniqueWithoutTypeInput!]
}

input PokemonTypesUpdateWithWhereUniqueWithoutPokemonInput {
  data: PokemonTypesUpdateWithoutPokemonInput!
  where: PokemonTypesWhereUniqueInput!
}

input PokemonTypesUpdateWithWhereUniqueWithoutTypeInput {
  data: PokemonTypesUpdateWithoutTypeInput!
  where: PokemonTypesWhereUniqueInput!
}

input PokemonTypesUpdateWithoutPokemonInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: NullableDateTimeFieldUpdateOperationsInput
  type: TypeUpdateOneRequiredWithoutPokemonTypesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PokemonTypesUpdateWithoutTypeInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: NullableDateTimeFieldUpdateOperationsInput
  pokemon: PokemonUpdateOneRequiredWithoutTypesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PokemonTypesUpsertWithWhereUniqueWithoutPokemonInput {
  create: PokemonTypesCreateWithoutPokemonInput!
  update: PokemonTypesUpdateWithoutPokemonInput!
  where: PokemonTypesWhereUniqueInput!
}

input PokemonTypesUpsertWithWhereUniqueWithoutTypeInput {
  create: PokemonTypesCreateWithoutTypeInput!
  update: PokemonTypesUpdateWithoutTypeInput!
  where: PokemonTypesWhereUniqueInput!
}

input PokemonTypesWhereInput {
  AND: [PokemonTypesWhereInput!]
  NOT: [PokemonTypesWhereInput!]
  OR: [PokemonTypesWhereInput!]
  createdAt: DateTimeFilter
  expiresAt: DateTimeNullableFilter
  pokemon: PokemonRelationFilter
  pokemonId: IntFilter
  type: TypeRelationFilter
  typeId: IntFilter
  updatedAt: DateTimeFilter
}

input PokemonTypesWhereUniqueInput {
  pokemonId_typeId: PokemonTypesPokemonIdTypeIdCompoundUniqueInput
}

input PokemonUpdateInput {
  Captured: CapturedUpdateManyWithoutPokemonInput
  abilities: PokemonAbilitiesUpdateManyWithoutPokemonInput
  against_bug: FloatFieldUpdateOperationsInput
  against_dark: FloatFieldUpdateOperationsInput
  against_dragon: FloatFieldUpdateOperationsInput
  against_electric: FloatFieldUpdateOperationsInput
  against_fairy: FloatFieldUpdateOperationsInput
  against_fight: FloatFieldUpdateOperationsInput
  against_fire: NullableFloatFieldUpdateOperationsInput
  against_flying: FloatFieldUpdateOperationsInput
  against_ghost: FloatFieldUpdateOperationsInput
  against_grass: NullableFloatFieldUpdateOperationsInput
  against_ground: FloatFieldUpdateOperationsInput
  against_ice: FloatFieldUpdateOperationsInput
  against_normal: NullableFloatFieldUpdateOperationsInput
  against_poison: FloatFieldUpdateOperationsInput
  against_psychic: FloatFieldUpdateOperationsInput
  against_rock: FloatFieldUpdateOperationsInput
  against_steel: FloatFieldUpdateOperationsInput
  against_water: NullableFloatFieldUpdateOperationsInput
  attack: IntFieldUpdateOperationsInput
  base_egg_steps: IntFieldUpdateOperationsInput
  base_happiness: IntFieldUpdateOperationsInput
  base_total: IntFieldUpdateOperationsInput
  capture_rate: NullableFloatFieldUpdateOperationsInput
  classification: ClassificationUpdateOneRequiredWithoutPokemonInput
  defense: IntFieldUpdateOperationsInput
  experience_growth: IntFieldUpdateOperationsInput
  generation: GenerationUpdateOneRequiredWithoutPokemonInput
  height_m: FloatFieldUpdateOperationsInput
  hp: IntFieldUpdateOperationsInput
  is_legendary: BoolFieldUpdateOperationsInput
  japanese_name: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  percentage_male: FloatFieldUpdateOperationsInput
  pokedex_number: PokedexUpdateOneWithoutPokemonInput
  sp_attack: IntFieldUpdateOperationsInput
  sp_defense: IntFieldUpdateOperationsInput
  speed: IntFieldUpdateOperationsInput
  status: EnumStatusFieldUpdateOperationsInput
  types: PokemonTypesUpdateManyWithoutPokemonInput
  weight_kg: FloatFieldUpdateOperationsInput
}

input PokemonUpdateManyMutationInput {
  against_bug: FloatFieldUpdateOperationsInput
  against_dark: FloatFieldUpdateOperationsInput
  against_dragon: FloatFieldUpdateOperationsInput
  against_electric: FloatFieldUpdateOperationsInput
  against_fairy: FloatFieldUpdateOperationsInput
  against_fight: FloatFieldUpdateOperationsInput
  against_fire: NullableFloatFieldUpdateOperationsInput
  against_flying: FloatFieldUpdateOperationsInput
  against_ghost: FloatFieldUpdateOperationsInput
  against_grass: NullableFloatFieldUpdateOperationsInput
  against_ground: FloatFieldUpdateOperationsInput
  against_ice: FloatFieldUpdateOperationsInput
  against_normal: NullableFloatFieldUpdateOperationsInput
  against_poison: FloatFieldUpdateOperationsInput
  against_psychic: FloatFieldUpdateOperationsInput
  against_rock: FloatFieldUpdateOperationsInput
  against_steel: FloatFieldUpdateOperationsInput
  against_water: NullableFloatFieldUpdateOperationsInput
  attack: IntFieldUpdateOperationsInput
  base_egg_steps: IntFieldUpdateOperationsInput
  base_happiness: IntFieldUpdateOperationsInput
  base_total: IntFieldUpdateOperationsInput
  capture_rate: NullableFloatFieldUpdateOperationsInput
  defense: IntFieldUpdateOperationsInput
  experience_growth: IntFieldUpdateOperationsInput
  height_m: FloatFieldUpdateOperationsInput
  hp: IntFieldUpdateOperationsInput
  is_legendary: BoolFieldUpdateOperationsInput
  japanese_name: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  percentage_male: FloatFieldUpdateOperationsInput
  sp_attack: IntFieldUpdateOperationsInput
  sp_defense: IntFieldUpdateOperationsInput
  speed: IntFieldUpdateOperationsInput
  status: EnumStatusFieldUpdateOperationsInput
  weight_kg: FloatFieldUpdateOperationsInput
}

input PokemonUpdateManyWithWhereWithoutClassificationInput {
  data: PokemonUpdateManyMutationInput!
  where: PokemonScalarWhereInput!
}

input PokemonUpdateManyWithWhereWithoutGenerationInput {
  data: PokemonUpdateManyMutationInput!
  where: PokemonScalarWhereInput!
}

input PokemonUpdateManyWithoutClassificationInput {
  connect: [PokemonWhereUniqueInput!]
  connectOrCreate: [PokemonCreateOrConnectWithoutClassificationInput!]
  create: [PokemonCreateWithoutClassificationInput!]
  createMany: PokemonCreateManyClassificationInputEnvelope
  delete: [PokemonWhereUniqueInput!]
  deleteMany: [PokemonScalarWhereInput!]
  disconnect: [PokemonWhereUniqueInput!]
  set: [PokemonWhereUniqueInput!]
  update: [PokemonUpdateWithWhereUniqueWithoutClassificationInput!]
  updateMany: [PokemonUpdateManyWithWhereWithoutClassificationInput!]
  upsert: [PokemonUpsertWithWhereUniqueWithoutClassificationInput!]
}

input PokemonUpdateManyWithoutGenerationInput {
  connect: [PokemonWhereUniqueInput!]
  connectOrCreate: [PokemonCreateOrConnectWithoutGenerationInput!]
  create: [PokemonCreateWithoutGenerationInput!]
  createMany: PokemonCreateManyGenerationInputEnvelope
  delete: [PokemonWhereUniqueInput!]
  deleteMany: [PokemonScalarWhereInput!]
  disconnect: [PokemonWhereUniqueInput!]
  set: [PokemonWhereUniqueInput!]
  update: [PokemonUpdateWithWhereUniqueWithoutGenerationInput!]
  updateMany: [PokemonUpdateManyWithWhereWithoutGenerationInput!]
  upsert: [PokemonUpsertWithWhereUniqueWithoutGenerationInput!]
}

input PokemonUpdateOneRequiredWithoutAbilitiesInput {
  connect: PokemonWhereUniqueInput
  connectOrCreate: PokemonCreateOrConnectWithoutAbilitiesInput
  create: PokemonCreateWithoutAbilitiesInput
  update: PokemonUpdateWithoutAbilitiesInput
  upsert: PokemonUpsertWithoutAbilitiesInput
}

input PokemonUpdateOneRequiredWithoutCapturedInput {
  connect: PokemonWhereUniqueInput
  connectOrCreate: PokemonCreateOrConnectWithoutCapturedInput
  create: PokemonCreateWithoutCapturedInput
  update: PokemonUpdateWithoutCapturedInput
  upsert: PokemonUpsertWithoutCapturedInput
}

input PokemonUpdateOneRequiredWithoutPokedex_numberInput {
  connect: PokemonWhereUniqueInput
  connectOrCreate: PokemonCreateOrConnectWithoutPokedex_numberInput
  create: PokemonCreateWithoutPokedex_numberInput
  update: PokemonUpdateWithoutPokedex_numberInput
  upsert: PokemonUpsertWithoutPokedex_numberInput
}

input PokemonUpdateOneRequiredWithoutTypesInput {
  connect: PokemonWhereUniqueInput
  connectOrCreate: PokemonCreateOrConnectWithoutTypesInput
  create: PokemonCreateWithoutTypesInput
  update: PokemonUpdateWithoutTypesInput
  upsert: PokemonUpsertWithoutTypesInput
}

input PokemonUpdateWithWhereUniqueWithoutClassificationInput {
  data: PokemonUpdateWithoutClassificationInput!
  where: PokemonWhereUniqueInput!
}

input PokemonUpdateWithWhereUniqueWithoutGenerationInput {
  data: PokemonUpdateWithoutGenerationInput!
  where: PokemonWhereUniqueInput!
}

input PokemonUpdateWithoutAbilitiesInput {
  Captured: CapturedUpdateManyWithoutPokemonInput
  against_bug: FloatFieldUpdateOperationsInput
  against_dark: FloatFieldUpdateOperationsInput
  against_dragon: FloatFieldUpdateOperationsInput
  against_electric: FloatFieldUpdateOperationsInput
  against_fairy: FloatFieldUpdateOperationsInput
  against_fight: FloatFieldUpdateOperationsInput
  against_fire: NullableFloatFieldUpdateOperationsInput
  against_flying: FloatFieldUpdateOperationsInput
  against_ghost: FloatFieldUpdateOperationsInput
  against_grass: NullableFloatFieldUpdateOperationsInput
  against_ground: FloatFieldUpdateOperationsInput
  against_ice: FloatFieldUpdateOperationsInput
  against_normal: NullableFloatFieldUpdateOperationsInput
  against_poison: FloatFieldUpdateOperationsInput
  against_psychic: FloatFieldUpdateOperationsInput
  against_rock: FloatFieldUpdateOperationsInput
  against_steel: FloatFieldUpdateOperationsInput
  against_water: NullableFloatFieldUpdateOperationsInput
  attack: IntFieldUpdateOperationsInput
  base_egg_steps: IntFieldUpdateOperationsInput
  base_happiness: IntFieldUpdateOperationsInput
  base_total: IntFieldUpdateOperationsInput
  capture_rate: NullableFloatFieldUpdateOperationsInput
  classification: ClassificationUpdateOneRequiredWithoutPokemonInput
  defense: IntFieldUpdateOperationsInput
  experience_growth: IntFieldUpdateOperationsInput
  generation: GenerationUpdateOneRequiredWithoutPokemonInput
  height_m: FloatFieldUpdateOperationsInput
  hp: IntFieldUpdateOperationsInput
  is_legendary: BoolFieldUpdateOperationsInput
  japanese_name: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  percentage_male: FloatFieldUpdateOperationsInput
  pokedex_number: PokedexUpdateOneWithoutPokemonInput
  sp_attack: IntFieldUpdateOperationsInput
  sp_defense: IntFieldUpdateOperationsInput
  speed: IntFieldUpdateOperationsInput
  status: EnumStatusFieldUpdateOperationsInput
  types: PokemonTypesUpdateManyWithoutPokemonInput
  weight_kg: FloatFieldUpdateOperationsInput
}

input PokemonUpdateWithoutCapturedInput {
  abilities: PokemonAbilitiesUpdateManyWithoutPokemonInput
  against_bug: FloatFieldUpdateOperationsInput
  against_dark: FloatFieldUpdateOperationsInput
  against_dragon: FloatFieldUpdateOperationsInput
  against_electric: FloatFieldUpdateOperationsInput
  against_fairy: FloatFieldUpdateOperationsInput
  against_fight: FloatFieldUpdateOperationsInput
  against_fire: NullableFloatFieldUpdateOperationsInput
  against_flying: FloatFieldUpdateOperationsInput
  against_ghost: FloatFieldUpdateOperationsInput
  against_grass: NullableFloatFieldUpdateOperationsInput
  against_ground: FloatFieldUpdateOperationsInput
  against_ice: FloatFieldUpdateOperationsInput
  against_normal: NullableFloatFieldUpdateOperationsInput
  against_poison: FloatFieldUpdateOperationsInput
  against_psychic: FloatFieldUpdateOperationsInput
  against_rock: FloatFieldUpdateOperationsInput
  against_steel: FloatFieldUpdateOperationsInput
  against_water: NullableFloatFieldUpdateOperationsInput
  attack: IntFieldUpdateOperationsInput
  base_egg_steps: IntFieldUpdateOperationsInput
  base_happiness: IntFieldUpdateOperationsInput
  base_total: IntFieldUpdateOperationsInput
  capture_rate: NullableFloatFieldUpdateOperationsInput
  classification: ClassificationUpdateOneRequiredWithoutPokemonInput
  defense: IntFieldUpdateOperationsInput
  experience_growth: IntFieldUpdateOperationsInput
  generation: GenerationUpdateOneRequiredWithoutPokemonInput
  height_m: FloatFieldUpdateOperationsInput
  hp: IntFieldUpdateOperationsInput
  is_legendary: BoolFieldUpdateOperationsInput
  japanese_name: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  percentage_male: FloatFieldUpdateOperationsInput
  pokedex_number: PokedexUpdateOneWithoutPokemonInput
  sp_attack: IntFieldUpdateOperationsInput
  sp_defense: IntFieldUpdateOperationsInput
  speed: IntFieldUpdateOperationsInput
  status: EnumStatusFieldUpdateOperationsInput
  types: PokemonTypesUpdateManyWithoutPokemonInput
  weight_kg: FloatFieldUpdateOperationsInput
}

input PokemonUpdateWithoutClassificationInput {
  Captured: CapturedUpdateManyWithoutPokemonInput
  abilities: PokemonAbilitiesUpdateManyWithoutPokemonInput
  against_bug: FloatFieldUpdateOperationsInput
  against_dark: FloatFieldUpdateOperationsInput
  against_dragon: FloatFieldUpdateOperationsInput
  against_electric: FloatFieldUpdateOperationsInput
  against_fairy: FloatFieldUpdateOperationsInput
  against_fight: FloatFieldUpdateOperationsInput
  against_fire: NullableFloatFieldUpdateOperationsInput
  against_flying: FloatFieldUpdateOperationsInput
  against_ghost: FloatFieldUpdateOperationsInput
  against_grass: NullableFloatFieldUpdateOperationsInput
  against_ground: FloatFieldUpdateOperationsInput
  against_ice: FloatFieldUpdateOperationsInput
  against_normal: NullableFloatFieldUpdateOperationsInput
  against_poison: FloatFieldUpdateOperationsInput
  against_psychic: FloatFieldUpdateOperationsInput
  against_rock: FloatFieldUpdateOperationsInput
  against_steel: FloatFieldUpdateOperationsInput
  against_water: NullableFloatFieldUpdateOperationsInput
  attack: IntFieldUpdateOperationsInput
  base_egg_steps: IntFieldUpdateOperationsInput
  base_happiness: IntFieldUpdateOperationsInput
  base_total: IntFieldUpdateOperationsInput
  capture_rate: NullableFloatFieldUpdateOperationsInput
  defense: IntFieldUpdateOperationsInput
  experience_growth: IntFieldUpdateOperationsInput
  generation: GenerationUpdateOneRequiredWithoutPokemonInput
  height_m: FloatFieldUpdateOperationsInput
  hp: IntFieldUpdateOperationsInput
  is_legendary: BoolFieldUpdateOperationsInput
  japanese_name: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  percentage_male: FloatFieldUpdateOperationsInput
  pokedex_number: PokedexUpdateOneWithoutPokemonInput
  sp_attack: IntFieldUpdateOperationsInput
  sp_defense: IntFieldUpdateOperationsInput
  speed: IntFieldUpdateOperationsInput
  status: EnumStatusFieldUpdateOperationsInput
  types: PokemonTypesUpdateManyWithoutPokemonInput
  weight_kg: FloatFieldUpdateOperationsInput
}

input PokemonUpdateWithoutGenerationInput {
  Captured: CapturedUpdateManyWithoutPokemonInput
  abilities: PokemonAbilitiesUpdateManyWithoutPokemonInput
  against_bug: FloatFieldUpdateOperationsInput
  against_dark: FloatFieldUpdateOperationsInput
  against_dragon: FloatFieldUpdateOperationsInput
  against_electric: FloatFieldUpdateOperationsInput
  against_fairy: FloatFieldUpdateOperationsInput
  against_fight: FloatFieldUpdateOperationsInput
  against_fire: NullableFloatFieldUpdateOperationsInput
  against_flying: FloatFieldUpdateOperationsInput
  against_ghost: FloatFieldUpdateOperationsInput
  against_grass: NullableFloatFieldUpdateOperationsInput
  against_ground: FloatFieldUpdateOperationsInput
  against_ice: FloatFieldUpdateOperationsInput
  against_normal: NullableFloatFieldUpdateOperationsInput
  against_poison: FloatFieldUpdateOperationsInput
  against_psychic: FloatFieldUpdateOperationsInput
  against_rock: FloatFieldUpdateOperationsInput
  against_steel: FloatFieldUpdateOperationsInput
  against_water: NullableFloatFieldUpdateOperationsInput
  attack: IntFieldUpdateOperationsInput
  base_egg_steps: IntFieldUpdateOperationsInput
  base_happiness: IntFieldUpdateOperationsInput
  base_total: IntFieldUpdateOperationsInput
  capture_rate: NullableFloatFieldUpdateOperationsInput
  classification: ClassificationUpdateOneRequiredWithoutPokemonInput
  defense: IntFieldUpdateOperationsInput
  experience_growth: IntFieldUpdateOperationsInput
  height_m: FloatFieldUpdateOperationsInput
  hp: IntFieldUpdateOperationsInput
  is_legendary: BoolFieldUpdateOperationsInput
  japanese_name: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  percentage_male: FloatFieldUpdateOperationsInput
  pokedex_number: PokedexUpdateOneWithoutPokemonInput
  sp_attack: IntFieldUpdateOperationsInput
  sp_defense: IntFieldUpdateOperationsInput
  speed: IntFieldUpdateOperationsInput
  status: EnumStatusFieldUpdateOperationsInput
  types: PokemonTypesUpdateManyWithoutPokemonInput
  weight_kg: FloatFieldUpdateOperationsInput
}

input PokemonUpdateWithoutPokedex_numberInput {
  Captured: CapturedUpdateManyWithoutPokemonInput
  abilities: PokemonAbilitiesUpdateManyWithoutPokemonInput
  against_bug: FloatFieldUpdateOperationsInput
  against_dark: FloatFieldUpdateOperationsInput
  against_dragon: FloatFieldUpdateOperationsInput
  against_electric: FloatFieldUpdateOperationsInput
  against_fairy: FloatFieldUpdateOperationsInput
  against_fight: FloatFieldUpdateOperationsInput
  against_fire: NullableFloatFieldUpdateOperationsInput
  against_flying: FloatFieldUpdateOperationsInput
  against_ghost: FloatFieldUpdateOperationsInput
  against_grass: NullableFloatFieldUpdateOperationsInput
  against_ground: FloatFieldUpdateOperationsInput
  against_ice: FloatFieldUpdateOperationsInput
  against_normal: NullableFloatFieldUpdateOperationsInput
  against_poison: FloatFieldUpdateOperationsInput
  against_psychic: FloatFieldUpdateOperationsInput
  against_rock: FloatFieldUpdateOperationsInput
  against_steel: FloatFieldUpdateOperationsInput
  against_water: NullableFloatFieldUpdateOperationsInput
  attack: IntFieldUpdateOperationsInput
  base_egg_steps: IntFieldUpdateOperationsInput
  base_happiness: IntFieldUpdateOperationsInput
  base_total: IntFieldUpdateOperationsInput
  capture_rate: NullableFloatFieldUpdateOperationsInput
  classification: ClassificationUpdateOneRequiredWithoutPokemonInput
  defense: IntFieldUpdateOperationsInput
  experience_growth: IntFieldUpdateOperationsInput
  generation: GenerationUpdateOneRequiredWithoutPokemonInput
  height_m: FloatFieldUpdateOperationsInput
  hp: IntFieldUpdateOperationsInput
  is_legendary: BoolFieldUpdateOperationsInput
  japanese_name: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  percentage_male: FloatFieldUpdateOperationsInput
  sp_attack: IntFieldUpdateOperationsInput
  sp_defense: IntFieldUpdateOperationsInput
  speed: IntFieldUpdateOperationsInput
  status: EnumStatusFieldUpdateOperationsInput
  types: PokemonTypesUpdateManyWithoutPokemonInput
  weight_kg: FloatFieldUpdateOperationsInput
}

input PokemonUpdateWithoutTypesInput {
  Captured: CapturedUpdateManyWithoutPokemonInput
  abilities: PokemonAbilitiesUpdateManyWithoutPokemonInput
  against_bug: FloatFieldUpdateOperationsInput
  against_dark: FloatFieldUpdateOperationsInput
  against_dragon: FloatFieldUpdateOperationsInput
  against_electric: FloatFieldUpdateOperationsInput
  against_fairy: FloatFieldUpdateOperationsInput
  against_fight: FloatFieldUpdateOperationsInput
  against_fire: NullableFloatFieldUpdateOperationsInput
  against_flying: FloatFieldUpdateOperationsInput
  against_ghost: FloatFieldUpdateOperationsInput
  against_grass: NullableFloatFieldUpdateOperationsInput
  against_ground: FloatFieldUpdateOperationsInput
  against_ice: FloatFieldUpdateOperationsInput
  against_normal: NullableFloatFieldUpdateOperationsInput
  against_poison: FloatFieldUpdateOperationsInput
  against_psychic: FloatFieldUpdateOperationsInput
  against_rock: FloatFieldUpdateOperationsInput
  against_steel: FloatFieldUpdateOperationsInput
  against_water: NullableFloatFieldUpdateOperationsInput
  attack: IntFieldUpdateOperationsInput
  base_egg_steps: IntFieldUpdateOperationsInput
  base_happiness: IntFieldUpdateOperationsInput
  base_total: IntFieldUpdateOperationsInput
  capture_rate: NullableFloatFieldUpdateOperationsInput
  classification: ClassificationUpdateOneRequiredWithoutPokemonInput
  defense: IntFieldUpdateOperationsInput
  experience_growth: IntFieldUpdateOperationsInput
  generation: GenerationUpdateOneRequiredWithoutPokemonInput
  height_m: FloatFieldUpdateOperationsInput
  hp: IntFieldUpdateOperationsInput
  is_legendary: BoolFieldUpdateOperationsInput
  japanese_name: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  percentage_male: FloatFieldUpdateOperationsInput
  pokedex_number: PokedexUpdateOneWithoutPokemonInput
  sp_attack: IntFieldUpdateOperationsInput
  sp_defense: IntFieldUpdateOperationsInput
  speed: IntFieldUpdateOperationsInput
  status: EnumStatusFieldUpdateOperationsInput
  weight_kg: FloatFieldUpdateOperationsInput
}

input PokemonUpsertWithWhereUniqueWithoutClassificationInput {
  create: PokemonCreateWithoutClassificationInput!
  update: PokemonUpdateWithoutClassificationInput!
  where: PokemonWhereUniqueInput!
}

input PokemonUpsertWithWhereUniqueWithoutGenerationInput {
  create: PokemonCreateWithoutGenerationInput!
  update: PokemonUpdateWithoutGenerationInput!
  where: PokemonWhereUniqueInput!
}

input PokemonUpsertWithoutAbilitiesInput {
  create: PokemonCreateWithoutAbilitiesInput!
  update: PokemonUpdateWithoutAbilitiesInput!
}

input PokemonUpsertWithoutCapturedInput {
  create: PokemonCreateWithoutCapturedInput!
  update: PokemonUpdateWithoutCapturedInput!
}

input PokemonUpsertWithoutPokedex_numberInput {
  create: PokemonCreateWithoutPokedex_numberInput!
  update: PokemonUpdateWithoutPokedex_numberInput!
}

input PokemonUpsertWithoutTypesInput {
  create: PokemonCreateWithoutTypesInput!
  update: PokemonUpdateWithoutTypesInput!
}

input PokemonWhereInput {
  AND: [PokemonWhereInput!]
  Captured: CapturedListRelationFilter
  NOT: [PokemonWhereInput!]
  OR: [PokemonWhereInput!]
  abilities: PokemonAbilitiesListRelationFilter
  against_bug: FloatFilter
  against_dark: FloatFilter
  against_dragon: FloatFilter
  against_electric: FloatFilter
  against_fairy: FloatFilter
  against_fight: FloatFilter
  against_fire: FloatNullableFilter
  against_flying: FloatFilter
  against_ghost: FloatFilter
  against_grass: FloatNullableFilter
  against_ground: FloatFilter
  against_ice: FloatFilter
  against_normal: FloatNullableFilter
  against_poison: FloatFilter
  against_psychic: FloatFilter
  against_rock: FloatFilter
  against_steel: FloatFilter
  against_water: FloatNullableFilter
  attack: IntFilter
  base_egg_steps: IntFilter
  base_happiness: IntFilter
  base_total: IntFilter
  capture_rate: FloatNullableFilter
  classification: ClassificationRelationFilter
  classificationId: IntFilter
  defense: IntFilter
  experience_growth: IntFilter
  generation: GenerationRelationFilter
  generationId: IntFilter
  height_m: FloatFilter
  hp: IntFilter
  id: IntFilter
  is_legendary: BoolFilter
  japanese_name: StringFilter
  name: StringFilter
  percentage_male: FloatFilter
  pokedex_number: PokedexRelationFilter
  sp_attack: IntFilter
  sp_defense: IntFilter
  speed: IntFilter
  status: EnumStatusFilter
  types: PokemonTypesListRelationFilter
  weight_kg: FloatFilter
}

input PokemonWhereUniqueInput {
  id: Int
}

type Query {
  abilities(cursor: AbilityWhereUniqueInput, distinct: [AbilityScalarFieldEnum!], orderBy: [AbilityOrderByWithRelationInput!], skip: Int, take: Int, where: AbilityWhereInput): [Ability!]!
  ability(where: AbilityWhereUniqueInput!): Ability
  aggregateAbility(cursor: AbilityWhereUniqueInput, orderBy: [AbilityOrderByWithRelationInput!], skip: Int, take: Int, where: AbilityWhereInput): AggregateAbility!
  aggregateCaptured(cursor: CapturedWhereUniqueInput, orderBy: [CapturedOrderByWithRelationInput!], skip: Int, take: Int, where: CapturedWhereInput): AggregateCaptured!
  aggregateClassification(cursor: ClassificationWhereUniqueInput, orderBy: [ClassificationOrderByWithRelationInput!], skip: Int, take: Int, where: ClassificationWhereInput): AggregateClassification!
  aggregateGeneration(cursor: GenerationWhereUniqueInput, orderBy: [GenerationOrderByWithRelationInput!], skip: Int, take: Int, where: GenerationWhereInput): AggregateGeneration!
  aggregatePokedex(cursor: PokedexWhereUniqueInput, orderBy: [PokedexOrderByWithRelationInput!], skip: Int, take: Int, where: PokedexWhereInput): AggregatePokedex!
  aggregatePokemon(cursor: PokemonWhereUniqueInput, orderBy: [PokemonOrderByWithRelationInput!], skip: Int, take: Int, where: PokemonWhereInput): AggregatePokemon!
  aggregatePokemonAbilities(cursor: PokemonAbilitiesWhereUniqueInput, orderBy: [PokemonAbilitiesOrderByWithRelationInput!], skip: Int, take: Int, where: PokemonAbilitiesWhereInput): AggregatePokemonAbilities!
  aggregatePokemonTypes(cursor: PokemonTypesWhereUniqueInput, orderBy: [PokemonTypesOrderByWithRelationInput!], skip: Int, take: Int, where: PokemonTypesWhereInput): AggregatePokemonTypes!
  aggregateTrainer(cursor: TrainerWhereUniqueInput, orderBy: [TrainerOrderByWithRelationInput!], skip: Int, take: Int, where: TrainerWhereInput): AggregateTrainer!
  aggregateType(cursor: TypeWhereUniqueInput, orderBy: [TypeOrderByWithRelationInput!], skip: Int, take: Int, where: TypeWhereInput): AggregateType!
  captured(where: CapturedWhereUniqueInput!): Captured
  captureds(cursor: CapturedWhereUniqueInput, distinct: [CapturedScalarFieldEnum!], orderBy: [CapturedOrderByWithRelationInput!], skip: Int, take: Int, where: CapturedWhereInput): [Captured!]!
  classification(where: ClassificationWhereUniqueInput!): Classification
  classifications(cursor: ClassificationWhereUniqueInput, distinct: [ClassificationScalarFieldEnum!], orderBy: [ClassificationOrderByWithRelationInput!], skip: Int, take: Int, where: ClassificationWhereInput): [Classification!]!
  findFirstAbility(cursor: AbilityWhereUniqueInput, distinct: [AbilityScalarFieldEnum!], orderBy: [AbilityOrderByWithRelationInput!], skip: Int, take: Int, where: AbilityWhereInput): Ability
  findFirstCaptured(cursor: CapturedWhereUniqueInput, distinct: [CapturedScalarFieldEnum!], orderBy: [CapturedOrderByWithRelationInput!], skip: Int, take: Int, where: CapturedWhereInput): Captured
  findFirstClassification(cursor: ClassificationWhereUniqueInput, distinct: [ClassificationScalarFieldEnum!], orderBy: [ClassificationOrderByWithRelationInput!], skip: Int, take: Int, where: ClassificationWhereInput): Classification
  findFirstGeneration(cursor: GenerationWhereUniqueInput, distinct: [GenerationScalarFieldEnum!], orderBy: [GenerationOrderByWithRelationInput!], skip: Int, take: Int, where: GenerationWhereInput): Generation
  findFirstPokedex(cursor: PokedexWhereUniqueInput, distinct: [PokedexScalarFieldEnum!], orderBy: [PokedexOrderByWithRelationInput!], skip: Int, take: Int, where: PokedexWhereInput): Pokedex
  findFirstPokemon(cursor: PokemonWhereUniqueInput, distinct: [PokemonScalarFieldEnum!], orderBy: [PokemonOrderByWithRelationInput!], skip: Int, take: Int, where: PokemonWhereInput): Pokemon
  findFirstPokemonAbilities(cursor: PokemonAbilitiesWhereUniqueInput, distinct: [PokemonAbilitiesScalarFieldEnum!], orderBy: [PokemonAbilitiesOrderByWithRelationInput!], skip: Int, take: Int, where: PokemonAbilitiesWhereInput): PokemonAbilities
  findFirstPokemonTypes(cursor: PokemonTypesWhereUniqueInput, distinct: [PokemonTypesScalarFieldEnum!], orderBy: [PokemonTypesOrderByWithRelationInput!], skip: Int, take: Int, where: PokemonTypesWhereInput): PokemonTypes
  findFirstTrainer(cursor: TrainerWhereUniqueInput, distinct: [TrainerScalarFieldEnum!], orderBy: [TrainerOrderByWithRelationInput!], skip: Int, take: Int, where: TrainerWhereInput): Trainer
  findFirstType(cursor: TypeWhereUniqueInput, distinct: [TypeScalarFieldEnum!], orderBy: [TypeOrderByWithRelationInput!], skip: Int, take: Int, where: TypeWhereInput): Type
  findManyPokemon(cursor: PokemonWhereUniqueInput, distinct: [PokemonScalarFieldEnum!], orderBy: [PokemonOrderByWithRelationInput!], skip: Int, take: Int, where: PokemonWhereInput): [Pokemon!]!
  findManyPokemonAbilities(cursor: PokemonAbilitiesWhereUniqueInput, distinct: [PokemonAbilitiesScalarFieldEnum!], orderBy: [PokemonAbilitiesOrderByWithRelationInput!], skip: Int, take: Int, where: PokemonAbilitiesWhereInput): [PokemonAbilities!]!
  findManyPokemonTypes(cursor: PokemonTypesWhereUniqueInput, distinct: [PokemonTypesScalarFieldEnum!], orderBy: [PokemonTypesOrderByWithRelationInput!], skip: Int, take: Int, where: PokemonTypesWhereInput): [PokemonTypes!]!
  findUniquePokemon(where: PokemonWhereUniqueInput!): Pokemon
  findUniquePokemonAbilities(where: PokemonAbilitiesWhereUniqueInput!): PokemonAbilities
  findUniquePokemonTypes(where: PokemonTypesWhereUniqueInput!): PokemonTypes
  generation(where: GenerationWhereUniqueInput!): Generation
  generations(cursor: GenerationWhereUniqueInput, distinct: [GenerationScalarFieldEnum!], orderBy: [GenerationOrderByWithRelationInput!], skip: Int, take: Int, where: GenerationWhereInput): [Generation!]!
  groupByAbility(by: [AbilityScalarFieldEnum!]!, having: AbilityScalarWhereWithAggregatesInput, orderBy: [AbilityOrderByWithAggregationInput!], skip: Int, take: Int, where: AbilityWhereInput): [AbilityGroupBy!]!
  groupByCaptured(by: [CapturedScalarFieldEnum!]!, having: CapturedScalarWhereWithAggregatesInput, orderBy: [CapturedOrderByWithAggregationInput!], skip: Int, take: Int, where: CapturedWhereInput): [CapturedGroupBy!]!
  groupByClassification(by: [ClassificationScalarFieldEnum!]!, having: ClassificationScalarWhereWithAggregatesInput, orderBy: [ClassificationOrderByWithAggregationInput!], skip: Int, take: Int, where: ClassificationWhereInput): [ClassificationGroupBy!]!
  groupByGeneration(by: [GenerationScalarFieldEnum!]!, having: GenerationScalarWhereWithAggregatesInput, orderBy: [GenerationOrderByWithAggregationInput!], skip: Int, take: Int, where: GenerationWhereInput): [GenerationGroupBy!]!
  groupByPokedex(by: [PokedexScalarFieldEnum!]!, having: PokedexScalarWhereWithAggregatesInput, orderBy: [PokedexOrderByWithAggregationInput!], skip: Int, take: Int, where: PokedexWhereInput): [PokedexGroupBy!]!
  groupByPokemon(by: [PokemonScalarFieldEnum!]!, having: PokemonScalarWhereWithAggregatesInput, orderBy: [PokemonOrderByWithAggregationInput!], skip: Int, take: Int, where: PokemonWhereInput): [PokemonGroupBy!]!
  groupByPokemonAbilities(by: [PokemonAbilitiesScalarFieldEnum!]!, having: PokemonAbilitiesScalarWhereWithAggregatesInput, orderBy: [PokemonAbilitiesOrderByWithAggregationInput!], skip: Int, take: Int, where: PokemonAbilitiesWhereInput): [PokemonAbilitiesGroupBy!]!
  groupByPokemonTypes(by: [PokemonTypesScalarFieldEnum!]!, having: PokemonTypesScalarWhereWithAggregatesInput, orderBy: [PokemonTypesOrderByWithAggregationInput!], skip: Int, take: Int, where: PokemonTypesWhereInput): [PokemonTypesGroupBy!]!
  groupByTrainer(by: [TrainerScalarFieldEnum!]!, having: TrainerScalarWhereWithAggregatesInput, orderBy: [TrainerOrderByWithAggregationInput!], skip: Int, take: Int, where: TrainerWhereInput): [TrainerGroupBy!]!
  groupByType(by: [TypeScalarFieldEnum!]!, having: TypeScalarWhereWithAggregatesInput, orderBy: [TypeOrderByWithAggregationInput!], skip: Int, take: Int, where: TypeWhereInput): [TypeGroupBy!]!
  pokedex(where: PokedexWhereUniqueInput!): Pokedex
  pokedexes(cursor: PokedexWhereUniqueInput, distinct: [PokedexScalarFieldEnum!], orderBy: [PokedexOrderByWithRelationInput!], skip: Int, take: Int, where: PokedexWhereInput): [Pokedex!]!
  trainer(where: TrainerWhereUniqueInput!): Trainer
  trainers(cursor: TrainerWhereUniqueInput, distinct: [TrainerScalarFieldEnum!], orderBy: [TrainerOrderByWithRelationInput!], skip: Int, take: Int, where: TrainerWhereInput): [Trainer!]!
  type(where: TypeWhereUniqueInput!): Type
  types(cursor: TypeWhereUniqueInput, distinct: [TypeScalarFieldEnum!], orderBy: [TypeOrderByWithRelationInput!], skip: Int, take: Int, where: TypeWhereInput): [Type!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

enum Status {
  Captured
  Seen
  Unseen
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Trainer {
  Captured(cursor: CapturedWhereUniqueInput, distinct: [CapturedScalarFieldEnum!], orderBy: [CapturedOrderByWithRelationInput!], skip: Int, take: Int, where: CapturedWhereInput): [Captured!]!
  _count: TrainerCount
  age: Int
  gender: Gender
  id: Int!
  name: String!
}

type TrainerAvgAggregate {
  age: Float
  id: Float
}

input TrainerAvgOrderByAggregateInput {
  age: SortOrder
  id: SortOrder
}

type TrainerCount {
  Captured: Int!
}

type TrainerCountAggregate {
  _all: Int!
  age: Int!
  gender: Int!
  id: Int!
  name: Int!
}

input TrainerCountOrderByAggregateInput {
  age: SortOrder
  gender: SortOrder
  id: SortOrder
  name: SortOrder
}

input TrainerCreateInput {
  Captured: CapturedCreateNestedManyWithoutTrainerInput
  age: Int
  gender: Gender
  name: String!
}

input TrainerCreateManyInput {
  age: Int
  gender: Gender
  id: Int
  name: String!
}

input TrainerCreateNestedOneWithoutCapturedInput {
  connect: TrainerWhereUniqueInput
  connectOrCreate: TrainerCreateOrConnectWithoutCapturedInput
  create: TrainerCreateWithoutCapturedInput
}

input TrainerCreateOrConnectWithoutCapturedInput {
  create: TrainerCreateWithoutCapturedInput!
  where: TrainerWhereUniqueInput!
}

input TrainerCreateWithoutCapturedInput {
  age: Int
  gender: Gender
  name: String!
}

type TrainerGroupBy {
  _avg: TrainerAvgAggregate
  _count: TrainerCountAggregate
  _max: TrainerMaxAggregate
  _min: TrainerMinAggregate
  _sum: TrainerSumAggregate
  age: Int
  gender: Gender
  id: Int!
  name: String!
}

type TrainerMaxAggregate {
  age: Int
  gender: Gender
  id: Int
  name: String
}

input TrainerMaxOrderByAggregateInput {
  age: SortOrder
  gender: SortOrder
  id: SortOrder
  name: SortOrder
}

type TrainerMinAggregate {
  age: Int
  gender: Gender
  id: Int
  name: String
}

input TrainerMinOrderByAggregateInput {
  age: SortOrder
  gender: SortOrder
  id: SortOrder
  name: SortOrder
}

input TrainerOrderByWithAggregationInput {
  _avg: TrainerAvgOrderByAggregateInput
  _count: TrainerCountOrderByAggregateInput
  _max: TrainerMaxOrderByAggregateInput
  _min: TrainerMinOrderByAggregateInput
  _sum: TrainerSumOrderByAggregateInput
  age: SortOrder
  gender: SortOrder
  id: SortOrder
  name: SortOrder
}

input TrainerOrderByWithRelationInput {
  Captured: CapturedOrderByRelationAggregateInput
  age: SortOrder
  gender: SortOrder
  id: SortOrder
  name: SortOrder
}

input TrainerRelationFilter {
  is: TrainerWhereInput
  isNot: TrainerWhereInput
}

enum TrainerScalarFieldEnum {
  age
  gender
  id
  name
}

input TrainerScalarWhereWithAggregatesInput {
  AND: [TrainerScalarWhereWithAggregatesInput!]
  NOT: [TrainerScalarWhereWithAggregatesInput!]
  OR: [TrainerScalarWhereWithAggregatesInput!]
  age: IntNullableWithAggregatesFilter
  gender: EnumGenderNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
}

type TrainerSumAggregate {
  age: Int
  id: Int
}

input TrainerSumOrderByAggregateInput {
  age: SortOrder
  id: SortOrder
}

input TrainerUpdateInput {
  Captured: CapturedUpdateManyWithoutTrainerInput
  age: NullableIntFieldUpdateOperationsInput
  gender: NullableEnumGenderFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input TrainerUpdateManyMutationInput {
  age: NullableIntFieldUpdateOperationsInput
  gender: NullableEnumGenderFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input TrainerUpdateOneRequiredWithoutCapturedInput {
  connect: TrainerWhereUniqueInput
  connectOrCreate: TrainerCreateOrConnectWithoutCapturedInput
  create: TrainerCreateWithoutCapturedInput
  update: TrainerUpdateWithoutCapturedInput
  upsert: TrainerUpsertWithoutCapturedInput
}

input TrainerUpdateWithoutCapturedInput {
  age: NullableIntFieldUpdateOperationsInput
  gender: NullableEnumGenderFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input TrainerUpsertWithoutCapturedInput {
  create: TrainerCreateWithoutCapturedInput!
  update: TrainerUpdateWithoutCapturedInput!
}

input TrainerWhereInput {
  AND: [TrainerWhereInput!]
  Captured: CapturedListRelationFilter
  NOT: [TrainerWhereInput!]
  OR: [TrainerWhereInput!]
  age: IntNullableFilter
  gender: EnumGenderNullableFilter
  id: IntFilter
  name: StringFilter
}

input TrainerWhereUniqueInput {
  id: Int
}

type Type {
  _count: TypeCount
  createdAt: DateTime!
  expiresAt: DateTime
  id: Int!
  pokemonTypes(cursor: PokemonTypesWhereUniqueInput, distinct: [PokemonTypesScalarFieldEnum!], orderBy: [PokemonTypesOrderByWithRelationInput!], skip: Int, take: Int, where: PokemonTypesWhereInput): [PokemonTypes!]!
  type: String!
  updatedAt: DateTime!
}

type TypeAvgAggregate {
  id: Float
}

input TypeAvgOrderByAggregateInput {
  id: SortOrder
}

type TypeCount {
  pokemonTypes: Int!
}

type TypeCountAggregate {
  _all: Int!
  createdAt: Int!
  expiresAt: Int!
  id: Int!
  type: Int!
  updatedAt: Int!
}

input TypeCountOrderByAggregateInput {
  createdAt: SortOrder
  expiresAt: SortOrder
  id: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input TypeCreateInput {
  createdAt: DateTime
  expiresAt: DateTime
  pokemonTypes: PokemonTypesCreateNestedManyWithoutTypeInput
  type: String!
  updatedAt: DateTime
}

input TypeCreateManyInput {
  createdAt: DateTime
  expiresAt: DateTime
  id: Int
  type: String!
  updatedAt: DateTime
}

input TypeCreateNestedOneWithoutPokemonTypesInput {
  connect: TypeWhereUniqueInput
  connectOrCreate: TypeCreateOrConnectWithoutPokemonTypesInput
  create: TypeCreateWithoutPokemonTypesInput
}

input TypeCreateOrConnectWithoutPokemonTypesInput {
  create: TypeCreateWithoutPokemonTypesInput!
  where: TypeWhereUniqueInput!
}

input TypeCreateWithoutPokemonTypesInput {
  createdAt: DateTime
  expiresAt: DateTime
  type: String!
  updatedAt: DateTime
}

type TypeGroupBy {
  _avg: TypeAvgAggregate
  _count: TypeCountAggregate
  _max: TypeMaxAggregate
  _min: TypeMinAggregate
  _sum: TypeSumAggregate
  createdAt: DateTime!
  expiresAt: DateTime
  id: Int!
  type: String!
  updatedAt: DateTime!
}

type TypeMaxAggregate {
  createdAt: DateTime
  expiresAt: DateTime
  id: Int
  type: String
  updatedAt: DateTime
}

input TypeMaxOrderByAggregateInput {
  createdAt: SortOrder
  expiresAt: SortOrder
  id: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

type TypeMinAggregate {
  createdAt: DateTime
  expiresAt: DateTime
  id: Int
  type: String
  updatedAt: DateTime
}

input TypeMinOrderByAggregateInput {
  createdAt: SortOrder
  expiresAt: SortOrder
  id: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input TypeOrderByWithAggregationInput {
  _avg: TypeAvgOrderByAggregateInput
  _count: TypeCountOrderByAggregateInput
  _max: TypeMaxOrderByAggregateInput
  _min: TypeMinOrderByAggregateInput
  _sum: TypeSumOrderByAggregateInput
  createdAt: SortOrder
  expiresAt: SortOrder
  id: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input TypeOrderByWithRelationInput {
  createdAt: SortOrder
  expiresAt: SortOrder
  id: SortOrder
  pokemonTypes: PokemonTypesOrderByRelationAggregateInput
  type: SortOrder
  updatedAt: SortOrder
}

input TypeRelationFilter {
  is: TypeWhereInput
  isNot: TypeWhereInput
}

enum TypeScalarFieldEnum {
  createdAt
  expiresAt
  id
  type
  updatedAt
}

input TypeScalarWhereWithAggregatesInput {
  AND: [TypeScalarWhereWithAggregatesInput!]
  NOT: [TypeScalarWhereWithAggregatesInput!]
  OR: [TypeScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  expiresAt: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  type: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type TypeSumAggregate {
  id: Int
}

input TypeSumOrderByAggregateInput {
  id: SortOrder
}

input TypeUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: NullableDateTimeFieldUpdateOperationsInput
  pokemonTypes: PokemonTypesUpdateManyWithoutTypeInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TypeUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: NullableDateTimeFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TypeUpdateOneRequiredWithoutPokemonTypesInput {
  connect: TypeWhereUniqueInput
  connectOrCreate: TypeCreateOrConnectWithoutPokemonTypesInput
  create: TypeCreateWithoutPokemonTypesInput
  update: TypeUpdateWithoutPokemonTypesInput
  upsert: TypeUpsertWithoutPokemonTypesInput
}

input TypeUpdateWithoutPokemonTypesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: NullableDateTimeFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TypeUpsertWithoutPokemonTypesInput {
  create: TypeCreateWithoutPokemonTypesInput!
  update: TypeUpdateWithoutPokemonTypesInput!
}

input TypeWhereInput {
  AND: [TypeWhereInput!]
  NOT: [TypeWhereInput!]
  OR: [TypeWhereInput!]
  createdAt: DateTimeFilter
  expiresAt: DateTimeNullableFilter
  id: IntFilter
  pokemonTypes: PokemonTypesListRelationFilter
  type: StringFilter
  updatedAt: DateTimeFilter
}

input TypeWhereUniqueInput {
  id: Int
  type: String
}
