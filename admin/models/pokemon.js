// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Pokemon = sequelize.define('pokemon', {
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    japaneseName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    percentageMale: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    attack: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    defense: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    hp: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    spAttack: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    spDefense: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    speed: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    weightKg: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    isLegendary: {
      type: DataTypes.BOOLEAN,
      allowNull: false,
    },
    againstBug: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    againstDark: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    againstDragon: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    againstElectric: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    againstFairy: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    againstFight: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    againstFire: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    againstFlying: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    againstGhost: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    againstGrass: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    againstGround: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    againstIce: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    againstNormal: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    againstPoison: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    againstPsychic: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    againstRock: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    againstSteel: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    againstWater: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    baseEggSteps: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    baseHappiness: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    baseTotal: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    captureRate: {
      type: DataTypes.DOUBLE,
    },
    experienceGrowth: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    heightM: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
  }, {
    tableName: 'Pokemon',
    underscored: true,
    timestamps: false,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Pokemon.associate = (models) => {
    Pokemon.belongsTo(models.classification, {
      foreignKey: {
        name: 'classificationIdKey',
        field: 'classificationId',
      },
      as: 'classification',
    });
    Pokemon.belongsTo(models.generation, {
      foreignKey: {
        name: 'generationIdKey',
        field: 'generationId',
      },
      as: 'generation',
    });
    Pokemon.hasMany(models.pokemonTypes, {
      foreignKey: {
        name: 'pokemonIdKey',
        field: 'pokemonId',
      },
      as: 'pokemonPokemonTypes',
    });
    Pokemon.hasMany(models.pokemonAbilities, {
      foreignKey: {
        name: 'pokemonIdKey',
        field: 'pokemonId',
      },
      as: 'pokemonPokemonAbilities',
    });
    Pokemon.hasOne(models.pokedex, {
      foreignKey: {
        name: 'pokemonIdKey',
        field: 'pokemonId',
      },
      as: 'pokemonPokedex',
    });
  };

  return Pokemon;
};
